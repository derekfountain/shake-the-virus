#!/usr/bin/wish

# Shake the Virus, a ZX Spectrum game.
# Copyright (C) 2022 Derek Fountain
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

set ::WIDTH_TILES   32
set ::HEIGHT_TILES  24

set ::WHITE             "white"
set ::RED               "red"
set ::BLACK             "black"
set ::GREEN             "green"
set ::BLUE              "blue"

set ::RED_CHAR          {0x80}
set ::BLACK_CHAR        {0x83}
set ::BLACK_COLOUR      "0x10, 0x06, 0x11, 0x07 ; ink yellow, paper white"

set ::GREEN_CHAR       {0x81}
set ::GREEN_COLOUR     "0x10, 0x06, 0x11, 0x02 ; ink yellow, paper red"

set ::HIGHLIT_OUTLINE   "yellow"
set ::UNHIGHLIT_OUTLINE "gray"

###

set ::BLOCK_SIZE    24
set ::BLOCK_SPACING 2

if { [llength $argv] != 1 } {
    puts stderr "Usage:"
    puts stderr "  level_designer.tcl <level_file.inc>"
    exit -1
}
set ::filename [lindex $argv 0]


pack [canvas .c -width  [expr {$::WIDTH_TILES  * $::BLOCK_SIZE + $WIDTH_TILES  * $::BLOCK_SPACING}] \
                -height [expr {$::HEIGHT_TILES * $::BLOCK_SIZE + $HEIGHT_TILES * $::BLOCK_SPACING}] \
     ]

proc generateOutput {} {
    global existingLayout
  
    set output(white) ""
    set output(red)   ""
    set output(black) ""
    set output(green) ""
    set output(blue)  ""
  
    set h [open $::filename "w"]
    
    puts $h "/* This file is generated by level_designer.tcl. Any changes  */"
    puts $h "/* made manually are likely to be lost unless you're careful. */"
    
    # Write passthrough block at the top
    #
    foreach line $::passThrough {
        puts $h $line
    }


    # Bulk of the line. Loop over all cells in the existingLayout dictionary
    # and build a line of pairs for each found colour.
    #
    foreach cell [dict keys $existingLayout] {
        set colour [dict get $existingLayout $cell]
        if { $output($colour) eq "" } {
            set output($colour) "uint8_t level_$colour\[\]\[2\] = \{ "
        }
        
        regexp {_(\d+)x(\d+)} $cell unused x y
        if { $x != 255 } {
            append output($colour) [format "\{%d,%d\}," $x $y]
        }
    }

    # Tag on the close
    #
    foreach colour [array names output] {
        if { $output($colour) eq "" } {
            continue
        }        
        append output($colour) "\{255,255\} \};"
    }

  
    foreach colour [array names output] {
        if { $output($colour) eq "" } {
            continue
        }        
        puts $h "$output($colour)"
        puts $h "draw_cells( level_$colour, PAPER_[string toupper $colour] );\n"
    }
        
    close $h
    
    return
}

proc tileEnter { widget tagName } {
    $widget itemconfigure $tagName -outline $::HIGHLIT_OUTLINE
}

proc tileLeave { widget tagName } {
    $widget itemconfigure $tagName -outline $::UNHIGHLIT_OUTLINE
}

proc tileSelect { widget tagName action } {
    global existingLayout
    
    # Ew, I've ended up with duplication here: both in the graphic widget
    # and in the dictionary. But it works. So meh.
    #
    if { $action eq "set red" } {
        $widget itemconfigure $tagName -fill $::RED
        dict set existingLayout $tagName $::RED
    } elseif { $action eq "set black" } {
        $widget itemconfigure $tagName -fill $::BLACK
        dict set existingLayout $tagName $::BLACK
    } elseif { $action eq "set white" } {
        $widget itemconfigure $tagName -fill $::WHITE
        set existingLayout [dict remove $existingLayout $tagName]
    } elseif { $action eq "set green" } {
        $widget itemconfigure $tagName -fill $::GREEN
        dict set existingLayout $tagName $::GREEN
    } elseif { $action eq "set blue" } {
        $widget itemconfigure $tagName -fill $::BLUE
        dict set existingLayout $tagName $::BLUE
    } else {
        return
    }

    generateOutput
}

# Read in the file
#
set passThrough {}
set existingLayout [dict create]
if { [file exists $::filename] } {

    set tagName ""

    set passing 0

    set h [open $filename "r"]
    while { [gets $h line] >= 0 } {

        # Pull out the meat of a line like "{5,5}, {255,255}". Also grab the colour from the varname
        #
        if { [regexp {^uint8_t\s+level_(\w+)\[\]\[2\] = \{\s*(.*)\s*\}} $line unused colour context] } {
        
            # Break into a list of pairs "{5,5}", "{255,255}"...
            #
            set pairs [regexp -all -inline {\{[^,]+,[^,]+\}} $context]
            set text ""
            foreach pair $pairs {
              
                # Each pair is decimal
                #
                regexp {\{(\d+),(\d+)\}} $pair unused x y
                
                # Create a tag in the layout dict like e.g.
                #  _0x31 = red
                #
                set tagName "_${y}x${x}"
                dict set existingLayout $tagName $colour 
            }
        } elseif { [regexp {// LEVEL DESIGNER PASSTHROUGH START} $line unused] } {
            set passing 1
            lappend ::passThrough $line
        } elseif { [regexp {// LEVEL DESIGNER PASSTHROUGH END} $line unused]} {
            set passing 0
            lappend ::passThrough $line
        } elseif { $passing } {
            lappend ::passThrough $line
        }

    }
    close $h
}

for { set x 0 } { $x < $::WIDTH_TILES } { incr x } {
    for { set y 0 } { $y < $::HEIGHT_TILES } { incr y } {
    
        # Generate a tag name for the canvas cell named for example
        #  _0x31
        # where 0 is the row, 31 is the column
        #
        set tagName "_${y}x${x}"
        .c create rectangle [expr {$x*($::BLOCK_SIZE+2)}] \
                            [expr {$y*($::BLOCK_SIZE+2)}] \
                            [expr {$x*($::BLOCK_SIZE+2)+$::BLOCK_SIZE}] \
                            [expr {$y*($::BLOCK_SIZE+2)+$::BLOCK_SIZE}] \
                            -tags $tagName \
                            -outline $::UNHIGHLIT_OUTLINE -width 1 -fill $::WHITE
        .c bind $tagName <Enter>   [list tileEnter  .c $tagName]
        .c bind $tagName <Leave>   [list tileLeave  .c $tagName]

        .c bind $tagName <Button-1>        [list tileSelect .c $tagName "set red"]      
        .c bind $tagName <Button-2>        [list tileSelect .c $tagName "set black"]    
        .c bind $tagName <Button-3>        [list tileSelect .c $tagName "set white"]       
        .c bind $tagName <Double-Button-1> [list tileSelect .c $tagName "set green"]
        .c bind $tagName <Double-Button-2> [list tileSelect .c $tagName "set blue"]

        # Loop over the layout entries created at startup when the config file
        # was read in. Set those blocks' colours
        #
        if { [dict exists $existingLayout $tagName] } {
            tileSelect .c $tagName "set [dict get $existingLayout $tagName]"
        }
    }
}
