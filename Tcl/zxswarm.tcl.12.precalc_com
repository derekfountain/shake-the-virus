#!/usr/bin/wish

set ::NUM_BOIDS 30
set ::SPEED 20

set c [canvas .c -width 256 -height 192]
pack $c
focus $c

expr {srand(0)}
array set dots {}
for { set i 0 } { $i < $::NUM_BOIDS } { incr i } {
    set dots($i,graphic) [$c create rectangle 0 0 1 1]
    set dots($i,velocity) [list 0 0]

    set dots($i,position) [list [expr {int(256*rand())}] [expr {int(192*rand())}]]
    set dots($i,position_int) "[expr {round([lindex $dots($i,position) 0])}] [expr {round([lindex $dots($i,position) 1])}]"
}
set centre [$c create rectangle 0 0 1 1 -outline yellow]
set goal   [$c create rectangle 0 0 5 5 -outline red]

set goal_x 128
set goal_y 96

bind $c <KeyPress-q> {incr ::goal_y -4; puts "Goal $::goal_x , $::goal_y"}
bind $c <KeyPress-a> {incr ::goal_y  4; puts "Goal $::goal_x , $::goal_y"}
bind $c <KeyPress-o> {incr ::goal_x -4; puts "Goal $::goal_x , $::goal_y"}
bind $c <KeyPress-p> {incr ::goal_x  4; puts "Goal $::goal_x , $::goal_y"}

proc draw_dots {} {
    global dots

    for { set i 0 } { $i < $::NUM_BOIDS } { incr i } {
	$::c moveto $dots($i,graphic) [expr {[lindex $dots($i,position) 0]}] \
	                              [expr {[lindex $dots($i,position) 1]}]
    }
}

proc vector_distance { v1 v2 } {
    set x_sq [expr { ([lindex $v1 0]-[lindex $v2 0]) * ([lindex $v1 0]-[lindex $v2 0]) } ]
    set y_sq [expr { ([lindex $v1 1]-[lindex $v2 1]) * ([lindex $v1 1]-[lindex $v2 1]) } ]
    return [expr {(sqrt($x_sq + $y_sq))}]
}

proc vector_add { v1 v2 } {
    set r [list [expr {[lindex $v1 0]+[lindex $v2 0]}] [expr {[lindex $v1 1]+[lindex $v2 1]}] ]
    return $r
}

proc vector_sub { v1 v2 } {
    set r [list [expr {[lindex $v1 0]-[lindex $v2 0]}] [expr {[lindex $v1 1]-[lindex $v2 1]}] ]
    return $r
}

proc vector_mul { v1 m } {
    set r [list [expr {[lindex $v1 0]*$m}] [expr {[lindex $v1 1]*$m}] ]
    return $r
}

proc vector_div { v1 d } {
    set r [list [expr {([lindex $v1 0]/$d)}] [expr {([lindex $v1 1]/$d)}] ]
    return $r
}

# Rule 1: Boids try to fly towards the centre of mass of neighbouring boids.
# Given just this rule and the velocity limitation the boids all convene on
# one spot, which then drifts slowly in one direction out of the frame. I
# think it's because, if there's one outlier boid which is slow to join the
# final clump, that boid's velocity remains applied to the whole mass. Bit of
# a guess really.
#
proc precalculate_centre_of_mass {} {
    global dots
    set calculated_centre {0 0}

    # Calc centre based on integer positions
    for { set i 0 } { $i < $::NUM_BOIDS } { incr i } {
	set calculated_centre [vector_add $calculated_centre $dots($i,position_int)]
    }
    set centre_of_mass [vector_div $calculated_centre $::NUM_BOIDS]
    set centre_of_mass "[expr {round([lindex $centre_of_mass 0])}] [expr {round([lindex $centre_of_mass 1])}]"

    return $centre_of_mass
}
proc fly_towards_centre { index centre_of_mass } {
    global dots

    # Distance of this boid to the centre of mass
    #
# No int
    set distance_to_centre [vector_sub $centre_of_mass $dots($index,position)]

    # Move boid 1% of distance towards centre
    #
    set boid_velocity [vector_div $distance_to_centre 100]

    # Test: yellow dot shows centre of mass - scale to screen
    $::c moveto $::centre [expr {[lindex $centre_of_mass 0]}] [expr {[lindex $centre_of_mass 1]}]

    return $boid_velocity
}

# Rule 2: Boids try to keep a small distance away from other boids
#
proc avoid_others { index } {
    global dots

    set MIN_DISTANCE 4
    set boid_velocity [list 0 0]

    for { set i 0 } { $i < $::NUM_BOIDS } { incr i } {
        if { $i != $index } {
            set distance [vector_distance $dots($i,position) $dots($index,position)]
            if { $distance < $MIN_DISTANCE } {
                set boid_velocity [vector_sub $boid_velocity [vector_sub $dots($i,position) $dots($index,position)]]
            }
        }
    }

    return $boid_velocity
}

# Rule 3: Boids try to match velocity with near boids. This
# appears to boost the "milling around" behaviour, but I'm
# not sure how. I think the fast ones are imparting part of
# their speed on the slower ones.
#
proc match_velocity { index } {

    global dots

    set MATCHING_FACTOR 6
    set mass_velocity [list 0 0]

    for { set i 0 } { $i < $::NUM_BOIDS } { incr i } {
	set mass_velocity [vector_add $mass_velocity $dots($i,velocity)]
    }
    set av_velocity [vector_div $mass_velocity $::NUM_BOIDS]

    # Not sure about this. We subtract the current boid's velocity from
    # the mass's average. Then take a fraction of it.
    #
    set r [vector_sub $av_velocity $dots($index,velocity)]
    set r [vector_div $r $MATCHING_FACTOR]

    return $r
}


# Restrict how fast the boids can move
#
proc limit_velocity { index } {
    global dots
    
    set SPEED_LIMIT 2

    set magnitude [vector_distance {0 0} $dots($index,velocity)]
    if { $magnitude > $SPEED_LIMIT } {
	set t [vector_div $dots($index,velocity) $magnitude]
	set dots($index,velocity) [vector_mul $t $SPEED_LIMIT]
    }
}

proc move_all_dots {} {
    global dots

    set centre_of_mass [precalculate_centre_of_mass]
puts "Centre of mass: $centre_of_mass"

    for { set i 0 } { $i < $::NUM_BOIDS } { incr i } {

	set v1 [fly_towards_centre $i $centre_of_mass]
	set v2 [avoid_others       $i]
	set v3 [match_velocity     $i]
    
	# Extra rule to make the boids follow the red dot.
	# Move 1% closer to it each iteration
	#
	set v4 [vector_sub [list $::goal_x $::goal_y] $dots($i,position)]
	set v4 [vector_div $v4 100]

	set dots($i,velocity) [vector_add $dots($i,velocity) $v1]
	set dots($i,velocity) [vector_add $dots($i,velocity) $v2]
	set dots($i,velocity) [vector_add $dots($i,velocity) $v3]
	set dots($i,velocity) [vector_add $dots($i,velocity) $v4]

	limit_velocity $i
	set dots($i,position) [vector_add $dots($i,position) $dots($i,velocity)]
	set dots($i,position_int) "[expr {round([lindex $dots($i,position) 0])}] [expr {round([lindex $dots($i,position) 1])}]"
    }

    draw_dots
    $::c moveto $::goal $::goal_x $::goal_y

    # Test: Report position and velocity
    #
    for { set i 0 } { $i < $::NUM_BOIDS } { incr i } {
    	puts "$i : Pos $dots($i,position), Vel $dots($i,velocity)"
    }

    after $::SPEED move_all_dots
}


after $::SPEED move_all_dots
