0x0000 ++ 1     0000              MODULE draw_swarm_c
0x0000 ++               LINE 0, "draw_swarm.c"
0x0000 ++               
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; File Created by SDCC : free open source ANSI-C Compiler
0x0000 ++               ; Version 4.1.6 #12555 (Linux)
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; Processed by Z88DK
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               
0x0000 ++               	EXTERN __divschar
0x0000 ++               	EXTERN __divschar_callee
0x0000 ++               	EXTERN __divsint
0x0000 ++               	EXTERN __divsint_callee
0x0000 ++               	EXTERN __divslong
0x0000 ++               	EXTERN __divslong_callee
0x0000 ++               	EXTERN __divslonglong
0x0000 ++               	EXTERN __divslonglong_callee
0x0000 ++               	EXTERN __divsuchar
0x0000 ++               	EXTERN __divsuchar_callee
0x0000 ++               	EXTERN __divuchar
0x0000 ++               	EXTERN __divuchar_callee
0x0000 ++               	EXTERN __divuint
0x0000 ++               	EXTERN __divuint_callee
0x0000 ++               	EXTERN __divulong
0x0000 ++               	EXTERN __divulong_callee
0x0000 ++               	EXTERN __divulonglong
0x0000 ++               	EXTERN __divulonglong_callee
0x0000 ++               	EXTERN __divuschar
0x0000 ++               	EXTERN __divuschar_callee
0x0000 ++               	EXTERN __modschar
0x0000 ++               	EXTERN __modschar_callee
0x0000 ++               	EXTERN __modsint
0x0000 ++               	EXTERN __modsint_callee
0x0000 ++               	EXTERN __modslong
0x0000 ++               	EXTERN __modslong_callee
0x0000 ++               	EXTERN __modslonglong
0x0000 ++               	EXTERN __modslonglong_callee
0x0000 ++               	EXTERN __modsuchar
0x0000 ++               	EXTERN __modsuchar_callee
0x0000 ++               	EXTERN __moduchar
0x0000 ++               	EXTERN __moduchar_callee
0x0000 ++               	EXTERN __moduint
0x0000 ++               	EXTERN __moduint_callee
0x0000 ++               	EXTERN __modulong
0x0000 ++               	EXTERN __modulong_callee
0x0000 ++               	EXTERN __modulonglong
0x0000 ++               	EXTERN __modulonglong_callee
0x0000 ++               	EXTERN __moduschar
0x0000 ++               	EXTERN __moduschar_callee
0x0000 ++               	EXTERN __mulint
0x0000 ++               	EXTERN __mulint_callee
0x0000 ++               	EXTERN __mullong
0x0000 ++               	EXTERN __mullong_callee
0x0000 ++               	EXTERN __mullonglong
0x0000 ++               	EXTERN __mullonglong_callee
0x0000 ++               	EXTERN __mulschar
0x0000 ++               	EXTERN __mulschar_callee
0x0000 ++               	EXTERN __mulsuchar
0x0000 ++               	EXTERN __mulsuchar_callee
0x0000 ++               	EXTERN __muluchar
0x0000 ++               	EXTERN __muluchar_callee
0x0000 ++               	EXTERN __muluschar
0x0000 ++               	EXTERN __muluschar_callee
0x0000 ++               	EXTERN __rlslonglong
0x0000 ++               	EXTERN __rlslonglong_callee
0x0000 ++               	EXTERN __rlulonglong
0x0000 ++               	EXTERN __rlulonglong_callee
0x0000 ++               	EXTERN __rrslonglong
0x0000 ++               	EXTERN __rrslonglong_callee
0x0000 ++               	EXTERN __rrulonglong
0x0000 ++               	EXTERN __rrulonglong_callee
0x0000 ++               	EXTERN ___sdcc_call_hl
0x0000 ++               	EXTERN ___sdcc_call_iy
0x0000 ++               	EXTERN ___sdcc_enter_ix
0x0000 ++               	EXTERN banked_call
0x0000 ++               	EXTERN _banked_ret
0x0000 ++               	EXTERN ___fs2schar
0x0000 ++               	EXTERN ___fs2schar_callee
0x0000 ++               	EXTERN ___fs2sint
0x0000 ++               	EXTERN ___fs2sint_callee
0x0000 ++               	EXTERN ___fs2slong
0x0000 ++               	EXTERN ___fs2slong_callee
0x0000 ++               	EXTERN ___fs2slonglong
0x0000 ++               	EXTERN ___fs2slonglong_callee
0x0000 ++               	EXTERN ___fs2uchar
0x0000 ++               	EXTERN ___fs2uchar_callee
0x0000 ++               	EXTERN ___fs2uint
0x0000 ++               	EXTERN ___fs2uint_callee
0x0000 ++               	EXTERN ___fs2ulong
0x0000 ++               	EXTERN ___fs2ulong_callee
0x0000 ++               	EXTERN ___fs2ulonglong
0x0000 ++               	EXTERN ___fs2ulonglong_callee
0x0000 ++               	EXTERN ___fsadd
0x0000 ++               	EXTERN ___fsadd_callee
0x0000 ++               	EXTERN ___fsdiv
0x0000 ++               	EXTERN ___fsdiv_callee
0x0000 ++               	EXTERN ___fseq
0x0000 ++               	EXTERN ___fseq_callee
0x0000 ++               	EXTERN ___fsgt
0x0000 ++               	EXTERN ___fsgt_callee
0x0000 ++               	EXTERN ___fslt
0x0000 ++               	EXTERN ___fslt_callee
0x0000 ++               	EXTERN ___fsmul
0x0000 ++               	EXTERN ___fsmul_callee
0x0000 ++               	EXTERN ___fsneq
0x0000 ++               	EXTERN ___fsneq_callee
0x0000 ++               	EXTERN ___fssub
0x0000 ++               	EXTERN ___fssub_callee
0x0000 ++               	EXTERN ___schar2fs
0x0000 ++               	EXTERN ___schar2fs_callee
0x0000 ++               	EXTERN ___sint2fs
0x0000 ++               	EXTERN ___sint2fs_callee
0x0000 ++               	EXTERN ___slong2fs
0x0000 ++               	EXTERN ___slong2fs_callee
0x0000 ++               	EXTERN ___slonglong2fs
0x0000 ++               	EXTERN ___slonglong2fs_callee
0x0000 ++               	EXTERN ___uchar2fs
0x0000 ++               	EXTERN ___uchar2fs_callee
0x0000 ++               	EXTERN ___uint2fs
0x0000 ++               	EXTERN ___uint2fs_callee
0x0000 ++               	EXTERN ___ulong2fs
0x0000 ++               	EXTERN ___ulong2fs_callee
0x0000 ++               	EXTERN ___ulonglong2fs
0x0000 ++               	EXTERN ___ulonglong2fs_callee
0x0000 ++               	EXTERN ____sdcc_2_copy_src_mhl_dst_deix
0x0000 ++               	EXTERN ____sdcc_2_copy_src_mhl_dst_bcix
0x0000 ++               	EXTERN ____sdcc_4_copy_src_mhl_dst_deix
0x0000 ++               	EXTERN ____sdcc_4_copy_src_mhl_dst_bcix
0x0000 ++               	EXTERN ____sdcc_4_copy_src_mhl_dst_mbc
0x0000 ++               	EXTERN ____sdcc_4_ldi_nosave_bc
0x0000 ++               	EXTERN ____sdcc_4_ldi_save_bc
0x0000 ++               	EXTERN ____sdcc_4_push_hlix
0x0000 ++               	EXTERN ____sdcc_4_push_mhl
0x0000 ++               	EXTERN ____sdcc_lib_setmem_hl
0x0000 ++               	EXTERN ____sdcc_ll_add_de_bc_hl
0x0000 ++               	EXTERN ____sdcc_ll_add_de_bc_hlix
0x0000 ++               	EXTERN ____sdcc_ll_add_de_hlix_bc
0x0000 ++               	EXTERN ____sdcc_ll_add_de_hlix_bcix
0x0000 ++               	EXTERN ____sdcc_ll_add_deix_bc_hl
0x0000 ++               	EXTERN ____sdcc_ll_add_deix_hlix
0x0000 ++               	EXTERN ____sdcc_ll_add_hlix_bc_deix
0x0000 ++               	EXTERN ____sdcc_ll_add_hlix_deix_bc
0x0000 ++               	EXTERN ____sdcc_ll_add_hlix_deix_bcix
0x0000 ++               	EXTERN ____sdcc_ll_asr_hlix_a
0x0000 ++               	EXTERN ____sdcc_ll_asr_mbc_a
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_de_dst_hlix
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_de_dst_hlsp
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_deix_dst_hl
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_deix_dst_hlix
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_deixm_dst_hlsp
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_desp_dst_hlsp
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_hl_dst_de
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_hlsp_dst_de
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_hlsp_dst_deixm
0x0000 ++               	EXTERN ____sdcc_ll_lsl_hlix_a
0x0000 ++               	EXTERN ____sdcc_ll_lsl_mbc_a
0x0000 ++               	EXTERN ____sdcc_ll_lsr_hlix_a
0x0000 ++               	EXTERN ____sdcc_ll_lsr_mbc_a
0x0000 ++               	EXTERN ____sdcc_ll_push_hlix
0x0000 ++               	EXTERN ____sdcc_ll_push_mhl
0x0000 ++               	EXTERN ____sdcc_ll_sub_de_bc_hl
0x0000 ++               	EXTERN ____sdcc_ll_sub_de_bc_hlix
0x0000 ++               	EXTERN ____sdcc_ll_sub_de_hlix_bc
0x0000 ++               	EXTERN ____sdcc_ll_sub_de_hlix_bcix
0x0000 ++               	EXTERN ____sdcc_ll_sub_deix_bc_hl
0x0000 ++               	EXTERN ____sdcc_ll_sub_deix_hlix
0x0000 ++               	EXTERN ____sdcc_ll_sub_hlix_bc_deix
0x0000 ++               	EXTERN ____sdcc_ll_sub_hlix_deix_bc
0x0000 ++               	EXTERN ____sdcc_ll_sub_hlix_deix_bcix
0x0000 ++               	EXTERN ____sdcc_load_debc_deix
0x0000 ++               	EXTERN ____sdcc_load_dehl_deix
0x0000 ++               	EXTERN ____sdcc_load_debc_mhl
0x0000 ++               	EXTERN ____sdcc_load_hlde_mhl
0x0000 ++               	EXTERN ____sdcc_store_dehl_bcix
0x0000 ++               	EXTERN ____sdcc_store_debc_hlix
0x0000 ++               	EXTERN ____sdcc_store_debc_mhl
0x0000 ++               	EXTERN ____sdcc_cpu_pop_ei
0x0000 ++               	EXTERN ____sdcc_cpu_pop_ei_jp
0x0000 ++               	EXTERN ____sdcc_cpu_push_di
0x0000 ++               	EXTERN ____sdcc_outi
0x0000 ++               	EXTERN ____sdcc_outi_128
0x0000 ++               	EXTERN ____sdcc_outi_256
0x0000 ++               	EXTERN ____sdcc_ldi
0x0000 ++               	EXTERN ____sdcc_ldi_128
0x0000 ++               	EXTERN ____sdcc_ldi_256
0x0000 ++               	EXTERN ____sdcc_4_copy_srcd_hlix_dst_deix
0x0000 ++               	EXTERN ____sdcc_4_and_src_mbc_mhl_dst_deix
0x0000 ++               	EXTERN ____sdcc_4_or_src_mbc_mhl_dst_deix
0x0000 ++               	EXTERN ____sdcc_4_xor_src_mbc_mhl_dst_deix
0x0000 ++               	EXTERN ____sdcc_4_or_src_dehl_dst_bcix
0x0000 ++               	EXTERN ____sdcc_4_xor_src_dehl_dst_bcix
0x0000 ++               	EXTERN ____sdcc_4_and_src_dehl_dst_bcix
0x0000 ++               	EXTERN ____sdcc_4_xor_src_mbc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_or_src_mbc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_and_src_mbc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_cpl_src_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_xor_src_debc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_or_src_debc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_and_src_debc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_and_src_debc_hlix_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_or_src_debc_hlix_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_xor_src_debc_hlix_dst_debc
0x0000 ++               
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; Public variables in this module
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               	GLOBAL _screen_byte_values
0x0000 ++               	GLOBAL _screen_line_offsets
0x0000 ++               	GLOBAL _screen_line_starts
0x0000 ++               	GLOBAL _init_draw_swarm
0x0000 ++               	GLOBAL _draw_swarm_or
0x0000 ++               	GLOBAL _clear_swarm
0x0000 ++               	GLOBAL _draw_player
0x0000 ++               	GLOBAL _clear_player
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; Externals used
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               	GLOBAL _draw_swarm
0x0000 ++               	GLOBAL _isunorderedf16_callee
0x0000 ++               	GLOBAL _isunorderedf16
0x0000 ++               	GLOBAL _isnotequalf16_callee
0x0000 ++               	GLOBAL _isnotequalf16
0x0000 ++               	GLOBAL _islessgreaterf16_callee
0x0000 ++               	GLOBAL _islessgreaterf16
0x0000 ++               	GLOBAL _islessequalf16_callee
0x0000 ++               	GLOBAL _islessequalf16
0x0000 ++               	GLOBAL _islessf16_callee
0x0000 ++               	GLOBAL _islessf16
0x0000 ++               	GLOBAL _isgreaterequalf16_callee
0x0000 ++               	GLOBAL _isgreaterequalf16
0x0000 ++               	GLOBAL _isgreaterf16_callee
0x0000 ++               	GLOBAL _isgreaterf16
0x0000 ++               	GLOBAL _floorf16_fastcall
0x0000 ++               	GLOBAL _floorf16
0x0000 ++               	GLOBAL _ceilf16_fastcall
0x0000 ++               	GLOBAL _ceilf16
0x0000 ++               	GLOBAL _negf16_fastcall
0x0000 ++               	GLOBAL _negf16
0x0000 ++               	GLOBAL _fabsf16_fastcall
0x0000 ++               	GLOBAL _fabsf16
0x0000 ++               	GLOBAL _powf16_callee
0x0000 ++               	GLOBAL _powf16
0x0000 ++               	GLOBAL _log10f16_fastcall
0x0000 ++               	GLOBAL _log10f16
0x0000 ++               	GLOBAL _log2f16_fastcall
0x0000 ++               	GLOBAL _log2f16
0x0000 ++               	GLOBAL _logf16_fastcall
0x0000 ++               	GLOBAL _logf16
0x0000 ++               	GLOBAL _exp10f16_fastcall
0x0000 ++               	GLOBAL _exp10f16
0x0000 ++               	GLOBAL _exp2f16_fastcall
0x0000 ++               	GLOBAL _exp2f16
0x0000 ++               	GLOBAL _expf16_fastcall
0x0000 ++               	GLOBAL _expf16
0x0000 ++               	GLOBAL _tanf16_fastcall
0x0000 ++               	GLOBAL _tanf16
0x0000 ++               	GLOBAL _sinf16_fastcall
0x0000 ++               	GLOBAL _sinf16
0x0000 ++               	GLOBAL _cosf16_fastcall
0x0000 ++               	GLOBAL _cosf16
0x0000 ++               	GLOBAL _atan2f16_callee
0x0000 ++               	GLOBAL _atan2f16
0x0000 ++               	GLOBAL _atanf16_fastcall
0x0000 ++               	GLOBAL _atanf16
0x0000 ++               	GLOBAL _asinf16_fastcall
0x0000 ++               	GLOBAL _asinf16
0x0000 ++               	GLOBAL _acosf16_fastcall
0x0000 ++               	GLOBAL _acosf16
0x0000 ++               	GLOBAL _ldexpf16_callee
0x0000 ++               	GLOBAL _ldexpf16
0x0000 ++               	GLOBAL _frexpf16_callee
0x0000 ++               	GLOBAL _frexpf16
0x0000 ++               	GLOBAL _mul10f16_fastcall
0x0000 ++               	GLOBAL _mul10f16
0x0000 ++               	GLOBAL _mul2f16_fastcall
0x0000 ++               	GLOBAL _mul2f16
0x0000 ++               	GLOBAL _div2f16_fastcall
0x0000 ++               	GLOBAL _div2f16
0x0000 ++               	GLOBAL _sqrtf16_fastcall
0x0000 ++               	GLOBAL _sqrtf16
0x0000 ++               	GLOBAL _invsqrtf16_fastcall
0x0000 ++               	GLOBAL _invsqrtf16
0x0000 ++               	GLOBAL _invf16_fastcall
0x0000 ++               	GLOBAL _invf16
0x0000 ++               	GLOBAL _hypotf16_callee
0x0000 ++               	GLOBAL _hypotf16
0x0000 ++               	GLOBAL _polyf16_callee
0x0000 ++               	GLOBAL _polyf16
0x0000 ++               	GLOBAL _fmaf16_callee
0x0000 ++               	GLOBAL _fmaf16
0x0000 ++               	GLOBAL _divf16_callee
0x0000 ++               	GLOBAL _divf16
0x0000 ++               	GLOBAL _mulf16_callee
0x0000 ++               	GLOBAL _mulf16
0x0000 ++               	GLOBAL _subf16_callee
0x0000 ++               	GLOBAL _subf16
0x0000 ++               	GLOBAL _addf16_callee
0x0000 ++               	GLOBAL _addf16
0x0000 ++               	GLOBAL _f16_u32_fastcall
0x0000 ++               	GLOBAL _f16_u32
0x0000 ++               	GLOBAL _f16_u16_fastcall
0x0000 ++               	GLOBAL _f16_u16
0x0000 ++               	GLOBAL _f16_u8_fastcall
0x0000 ++               	GLOBAL _f16_u8
0x0000 ++               	GLOBAL _f16_i32_fastcall
0x0000 ++               	GLOBAL _f16_i32
0x0000 ++               	GLOBAL _f16_i16_fastcall
0x0000 ++               	GLOBAL _f16_i16
0x0000 ++               	GLOBAL _f16_i8_fastcall
0x0000 ++               	GLOBAL _f16_i8
0x0000 ++               	GLOBAL _u32_f16_fastcall
0x0000 ++               	GLOBAL _u32_f16
0x0000 ++               	GLOBAL _i32_f16_fastcall
0x0000 ++               	GLOBAL _i32_f16
0x0000 ++               	GLOBAL _u16_f16_fastcall
0x0000 ++               	GLOBAL _u16_f16
0x0000 ++               	GLOBAL _i16_f16_fastcall
0x0000 ++               	GLOBAL _i16_f16
0x0000 ++               	GLOBAL _f32_f16_fastcall
0x0000 ++               	GLOBAL _f32_f16
0x0000 ++               	GLOBAL _f16_f32_fastcall
0x0000 ++               	GLOBAL _f16_f32
0x0000 ++               	GLOBAL _f48_f16_fastcall
0x0000 ++               	GLOBAL _f48_f16
0x0000 ++               	GLOBAL _f16_f48_fastcall
0x0000 ++               	GLOBAL _f16_f48
0x0000 ++               	GLOBAL _poly_callee
0x0000 ++               	GLOBAL _poly
0x0000 ++               	GLOBAL _exp10_fastcall
0x0000 ++               	GLOBAL _exp10
0x0000 ++               	GLOBAL _mul10u_fastcall
0x0000 ++               	GLOBAL _mul10u
0x0000 ++               	GLOBAL _mul2_fastcall
0x0000 ++               	GLOBAL _mul2
0x0000 ++               	GLOBAL _div2_fastcall
0x0000 ++               	GLOBAL _div2
0x0000 ++               	GLOBAL _invsqrt_fastcall
0x0000 ++               	GLOBAL _invsqrt
0x0000 ++               	GLOBAL _inv_fastcall
0x0000 ++               	GLOBAL _inv
0x0000 ++               	GLOBAL _sqr_fastcall
0x0000 ++               	GLOBAL _sqr
0x0000 ++               	GLOBAL _neg_fastcall
0x0000 ++               	GLOBAL _neg
0x0000 ++               	GLOBAL _isunordered_callee
0x0000 ++               	GLOBAL _isunordered
0x0000 ++               	GLOBAL _islessgreater_callee
0x0000 ++               	GLOBAL _islessgreater
0x0000 ++               	GLOBAL _islessequal_callee
0x0000 ++               	GLOBAL _islessequal
0x0000 ++               	GLOBAL _isless_callee
0x0000 ++               	GLOBAL _isless
0x0000 ++               	GLOBAL _isgreaterequal_callee
0x0000 ++               	GLOBAL _isgreaterequal
0x0000 ++               	GLOBAL _isgreater_callee
0x0000 ++               	GLOBAL _isgreater
0x0000 ++               	GLOBAL _fma_callee
0x0000 ++               	GLOBAL _fma
0x0000 ++               	GLOBAL _fmin_callee
0x0000 ++               	GLOBAL _fmin
0x0000 ++               	GLOBAL _fmax_callee
0x0000 ++               	GLOBAL _fmax
0x0000 ++               	GLOBAL _fdim_callee
0x0000 ++               	GLOBAL _fdim
0x0000 ++               	GLOBAL _nexttoward_callee
0x0000 ++               	GLOBAL _nexttoward
0x0000 ++               	GLOBAL _nextafter_callee
0x0000 ++               	GLOBAL _nextafter
0x0000 ++               	GLOBAL _nan_fastcall
0x0000 ++               	GLOBAL _nan
0x0000 ++               	GLOBAL _copysign_callee
0x0000 ++               	GLOBAL _copysign
0x0000 ++               	GLOBAL _remquo_callee
0x0000 ++               	GLOBAL _remquo
0x0000 ++               	GLOBAL _remainder_callee
0x0000 ++               	GLOBAL _remainder
0x0000 ++               	GLOBAL _fmod_callee
0x0000 ++               	GLOBAL _fmod
0x0000 ++               	GLOBAL _modf_callee
0x0000 ++               	GLOBAL _modf
0x0000 ++               	GLOBAL _trunc_fastcall
0x0000 ++               	GLOBAL _trunc
0x0000 ++               	GLOBAL _lround_fastcall
0x0000 ++               	GLOBAL _lround
0x0000 ++               	GLOBAL _round_fastcall
0x0000 ++               	GLOBAL _round
0x0000 ++               	GLOBAL _lrint_fastcall
0x0000 ++               	GLOBAL _lrint
0x0000 ++               	GLOBAL _rint_fastcall
0x0000 ++               	GLOBAL _rint
0x0000 ++               	GLOBAL _nearbyint_fastcall
0x0000 ++               	GLOBAL _nearbyint
0x0000 ++               	GLOBAL _floor_fastcall
0x0000 ++               	GLOBAL _floor
0x0000 ++               	GLOBAL _ceil_fastcall
0x0000 ++               	GLOBAL _ceil
0x0000 ++               	GLOBAL _tgamma_fastcall
0x0000 ++               	GLOBAL _tgamma
0x0000 ++               	GLOBAL _lgamma_fastcall
0x0000 ++               	GLOBAL _lgamma
0x0000 ++               	GLOBAL _erfc_fastcall
0x0000 ++               	GLOBAL _erfc
0x0000 ++               	GLOBAL _erf_fastcall
0x0000 ++               	GLOBAL _erf
0x0000 ++               	GLOBAL _cbrt_fastcall
0x0000 ++               	GLOBAL _cbrt
0x0000 ++               	GLOBAL _sqrt_fastcall
0x0000 ++               	GLOBAL _sqrt
0x0000 ++               	GLOBAL _pow_callee
0x0000 ++               	GLOBAL _pow
0x0000 ++               	GLOBAL _hypot_callee
0x0000 ++               	GLOBAL _hypot
0x0000 ++               	GLOBAL _fabs_fastcall
0x0000 ++               	GLOBAL _fabs
0x0000 ++               	GLOBAL _logb_fastcall
0x0000 ++               	GLOBAL _logb
0x0000 ++               	GLOBAL _log2_fastcall
0x0000 ++               	GLOBAL _log2
0x0000 ++               	GLOBAL _log1p_fastcall
0x0000 ++               	GLOBAL _log1p
0x0000 ++               	GLOBAL _log10_fastcall
0x0000 ++               	GLOBAL _log10
0x0000 ++               	GLOBAL _log_fastcall
0x0000 ++               	GLOBAL _log
0x0000 ++               	GLOBAL _scalbln_callee
0x0000 ++               	GLOBAL _scalbln
0x0000 ++               	GLOBAL _scalbn_callee
0x0000 ++               	GLOBAL _scalbn
0x0000 ++               	GLOBAL _ldexp_callee
0x0000 ++               	GLOBAL _ldexp
0x0000 ++               	GLOBAL _ilogb_fastcall
0x0000 ++               	GLOBAL _ilogb
0x0000 ++               	GLOBAL _frexp_callee
0x0000 ++               	GLOBAL _frexp
0x0000 ++               	GLOBAL _expm1_fastcall
0x0000 ++               	GLOBAL _expm1
0x0000 ++               	GLOBAL _exp2_fastcall
0x0000 ++               	GLOBAL _exp2
0x0000 ++               	GLOBAL _exp_fastcall
0x0000 ++               	GLOBAL _exp
0x0000 ++               	GLOBAL _tanh_fastcall
0x0000 ++               	GLOBAL _tanh
0x0000 ++               	GLOBAL _sinh_fastcall
0x0000 ++               	GLOBAL _sinh
0x0000 ++               	GLOBAL _cosh_fastcall
0x0000 ++               	GLOBAL _cosh
0x0000 ++               	GLOBAL _atanh_fastcall
0x0000 ++               	GLOBAL _atanh
0x0000 ++               	GLOBAL _asinh_fastcall
0x0000 ++               	GLOBAL _asinh
0x0000 ++               	GLOBAL _acosh_fastcall
0x0000 ++               	GLOBAL _acosh
0x0000 ++               	GLOBAL _tan_fastcall
0x0000 ++               	GLOBAL _tan
0x0000 ++               	GLOBAL _sin_fastcall
0x0000 ++               	GLOBAL _sin
0x0000 ++               	GLOBAL _cos_fastcall
0x0000 ++               	GLOBAL _cos
0x0000 ++               	GLOBAL _atan2_callee
0x0000 ++               	GLOBAL _atan2
0x0000 ++               	GLOBAL _atan_fastcall
0x0000 ++               	GLOBAL _atan
0x0000 ++               	GLOBAL _asin_fastcall
0x0000 ++               	GLOBAL _asin
0x0000 ++               	GLOBAL _acos_fastcall
0x0000 ++               	GLOBAL _acos
0x0000 ++               	GLOBAL _zx_pattern_fill_callee
0x0000 ++               	GLOBAL _zx_pattern_fill
0x0000 ++               	GLOBAL _zx_saddrpup_fastcall
0x0000 ++               	GLOBAL _zx_saddrpup
0x0000 ++               	GLOBAL _zx_saddrpright_callee
0x0000 ++               	GLOBAL _zx_saddrpright
0x0000 ++               	GLOBAL _zx_saddrpleft_callee
0x0000 ++               	GLOBAL _zx_saddrpleft
0x0000 ++               	GLOBAL _zx_saddrpdown_fastcall
0x0000 ++               	GLOBAL _zx_saddrpdown
0x0000 ++               	GLOBAL _zx_saddrcup_fastcall
0x0000 ++               	GLOBAL _zx_saddrcup
0x0000 ++               	GLOBAL _zx_saddrcright_fastcall
0x0000 ++               	GLOBAL _zx_saddrcright
0x0000 ++               	GLOBAL _zx_saddrcleft_fastcall
0x0000 ++               	GLOBAL _zx_saddrcleft
0x0000 ++               	GLOBAL _zx_saddrcdown_fastcall
0x0000 ++               	GLOBAL _zx_saddrcdown
0x0000 ++               	GLOBAL _zx_saddr2py_fastcall
0x0000 ++               	GLOBAL _zx_saddr2py
0x0000 ++               	GLOBAL _zx_saddr2px_fastcall
0x0000 ++               	GLOBAL _zx_saddr2px
0x0000 ++               	GLOBAL _zx_saddr2cy_fastcall
0x0000 ++               	GLOBAL _zx_saddr2cy
0x0000 ++               	GLOBAL _zx_saddr2cx_fastcall
0x0000 ++               	GLOBAL _zx_saddr2cx
0x0000 ++               	GLOBAL _zx_saddr2aaddr_fastcall
0x0000 ++               	GLOBAL _zx_saddr2aaddr
0x0000 ++               	GLOBAL _zx_py2saddr_fastcall
0x0000 ++               	GLOBAL _zx_py2saddr
0x0000 ++               	GLOBAL _zx_py2aaddr_fastcall
0x0000 ++               	GLOBAL _zx_py2aaddr
0x0000 ++               	GLOBAL _zx_pxy2saddr_callee
0x0000 ++               	GLOBAL _zx_pxy2saddr
0x0000 ++               	GLOBAL _zx_pxy2aaddr_callee
0x0000 ++               	GLOBAL _zx_pxy2aaddr
0x0000 ++               	GLOBAL _zx_px2bitmask_fastcall
0x0000 ++               	GLOBAL _zx_px2bitmask
0x0000 ++               	GLOBAL _zx_cy2saddr_fastcall
0x0000 ++               	GLOBAL _zx_cy2saddr
0x0000 ++               	GLOBAL _zx_cy2aaddr_fastcall
0x0000 ++               	GLOBAL _zx_cy2aaddr
0x0000 ++               	GLOBAL _zx_cxy2saddr_callee
0x0000 ++               	GLOBAL _zx_cxy2saddr
0x0000 ++               	GLOBAL _zx_cxy2aaddr_callee
0x0000 ++               	GLOBAL _zx_cxy2aaddr
0x0000 ++               	GLOBAL _zx_bitmask2px_fastcall
0x0000 ++               	GLOBAL _zx_bitmask2px
0x0000 ++               	GLOBAL _zx_aaddrcup_fastcall
0x0000 ++               	GLOBAL _zx_aaddrcup
0x0000 ++               	GLOBAL _zx_aaddrcright_fastcall
0x0000 ++               	GLOBAL _zx_aaddrcright
0x0000 ++               	GLOBAL _zx_aaddrcleft_fastcall
0x0000 ++               	GLOBAL _zx_aaddrcleft
0x0000 ++               	GLOBAL _zx_aaddrcdown_fastcall
0x0000 ++               	GLOBAL _zx_aaddrcdown
0x0000 ++               	GLOBAL _zx_aaddr2saddr_fastcall
0x0000 ++               	GLOBAL _zx_aaddr2saddr
0x0000 ++               	GLOBAL _zx_aaddr2py_fastcall
0x0000 ++               	GLOBAL _zx_aaddr2py
0x0000 ++               	GLOBAL _zx_aaddr2px_fastcall
0x0000 ++               	GLOBAL _zx_aaddr2px
0x0000 ++               	GLOBAL _zx_aaddr2cy_fastcall
0x0000 ++               	GLOBAL _zx_aaddr2cy
0x0000 ++               	GLOBAL _zx_aaddr2cx_fastcall
0x0000 ++               	GLOBAL _zx_aaddr2cx
0x0000 ++               	GLOBAL _zx_visit_wc_pix_callee
0x0000 ++               	GLOBAL _zx_visit_wc_pix
0x0000 ++               	GLOBAL _zx_visit_wc_attr_callee
0x0000 ++               	GLOBAL _zx_visit_wc_attr
0x0000 ++               	GLOBAL _zx_scroll_wc_up_pix_callee
0x0000 ++               	GLOBAL _zx_scroll_wc_up_pix
0x0000 ++               	GLOBAL _zx_scroll_wc_up_attr_callee
0x0000 ++               	GLOBAL _zx_scroll_wc_up_attr
0x0000 ++               	GLOBAL _zx_scroll_wc_up_callee
0x0000 ++               	GLOBAL _zx_scroll_wc_up
0x0000 ++               	GLOBAL _zx_scroll_up_pix_callee
0x0000 ++               	GLOBAL _zx_scroll_up_pix
0x0000 ++               	GLOBAL _zx_scroll_up_attr_callee
0x0000 ++               	GLOBAL _zx_scroll_up_attr
0x0000 ++               	GLOBAL _zx_scroll_up_callee
0x0000 ++               	GLOBAL _zx_scroll_up
0x0000 ++               	GLOBAL _zx_cls_wc_pix_callee
0x0000 ++               	GLOBAL _zx_cls_wc_pix
0x0000 ++               	GLOBAL _zx_cls_wc_attr_callee
0x0000 ++               	GLOBAL _zx_cls_wc_attr
0x0000 ++               	GLOBAL _zx_cls_wc_callee
0x0000 ++               	GLOBAL _zx_cls_wc
0x0000 ++               	GLOBAL _zx_cls_pix_fastcall
0x0000 ++               	GLOBAL _zx_cls_pix
0x0000 ++               	GLOBAL _zx_cls_attr_fastcall
0x0000 ++               	GLOBAL _zx_cls_attr
0x0000 ++               	GLOBAL _zx_cls_fastcall
0x0000 ++               	GLOBAL _zx_cls
0x0000 ++               	GLOBAL _zx_border_fastcall
0x0000 ++               	GLOBAL _zx_border
0x0000 ++               	GLOBAL _zx_tape_verify_block_callee
0x0000 ++               	GLOBAL _zx_tape_verify_block
0x0000 ++               	GLOBAL _zx_tape_save_block_callee
0x0000 ++               	GLOBAL _zx_tape_save_block
0x0000 ++               	GLOBAL _zx_tape_load_block_callee
0x0000 ++               	GLOBAL _zx_tape_load_block
0x0000 ++               	GLOBAL _previous_swarm
0x0000 ++               	GLOBAL _swarm
0x0000 ++               	GLOBAL _GLOBAL_ZX_PORT_7FFD
0x0000 ++               	GLOBAL _GLOBAL_ZX_PORT_1FFD
0x0000 ++               	GLOBAL _GLOBAL_ZX_PORT_FE
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; special function registers
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               defc _IO_FE	=	0x00fe
0x0000 ++               defc _IO_1FFD	=	0x1ffd
0x0000 ++               defc _IO_7FFD	=	0x7ffd
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; ram data
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               	SECTION bss_compiler
0x9B59 ++               _screen_line_starts:
0x9B59 ++   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       0020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       0040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       0060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       0080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       00A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       00C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       00E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       0100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       0120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       0140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++       0160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9B59 ++                         	DEFS 384
0x9CD9 ++               _screen_line_offsets:
0x9CD9 ++   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9CD9 ++       01A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9CD9 ++       01C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9CD9 ++       01E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9CD9 ++       0200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9CD9 ++       0220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9CD9 ++       0240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9CD9 ++       0260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9CD9 ++                         	DEFS 256
0x9DD9 ++               _screen_byte_values:
0x9DD9 ++   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9DD9 ++       02A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9DD9 ++       02C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9DD9 ++       02E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9DD9 ++       0300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9DD9 ++       0320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9DD9 ++       0340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9DD9 ++       0360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x9DD9 ++                         	DEFS 256
0x9ED9 ++               ;--------------------------------------------------------
0x9ED9 ++               ; ram data
0x9ED9 ++               ;--------------------------------------------------------
0x9ED9 ++               
0x9ED9 ++ 592   0380              IF 0
0x9ED9 ++ 593   0380              
0x9ED9 ++ 594   0380              ; .area _INITIALIZED removed by z88dk
0x9ED9 ++ 595   0380              
0x9ED9 ++ 596   0380              
0x9ED9 ++ 597   0380              ENDIF
0x9ED9 ++               
0x9ED9 ++               ;--------------------------------------------------------
0x9ED9 ++               ; absolute external ram data
0x9ED9 ++               ;--------------------------------------------------------
0x9ED9 ++               	SECTION IGNORE
0x9B59 ++               ;--------------------------------------------------------
0x9B59 ++               ; global & static initialisations
0x9B59 ++               ;--------------------------------------------------------
0x9B59 ++               	SECTION code_crt_init
0x9B59 ++               ;--------------------------------------------------------
0x9B59 ++               ; Home
0x9B59 ++               ;--------------------------------------------------------
0x9B59 ++               	SECTION IGNORE
0x9B59 ++               ;--------------------------------------------------------
0x9B59 ++               ; code
0x9B59 ++               ;--------------------------------------------------------
0x9B59 ++               	SECTION code_compiler
0x9B59 ++               ;draw_swarm.c:15: void init_draw_swarm(void)
0x9B59 ++               ;	---------------------------------
0x9B59 ++               ; Function init_draw_swarm
0x9B59 ++               ; ---------------------------------
0x9586 ++               _init_draw_swarm:
0x9586 ++               ;draw_swarm.c:18: for(i=0;i<192;i++)
0x9586 ++   01 00 00    	ld	bc,0x0000
0x9589 ++               l_init_draw_swarm_00103:
0x9589 ++               ;draw_swarm.c:19: screen_line_starts[i] = zx_pxy2saddr( 0, i );
0x9589 ++   69          	ld	l, c
0x958A ++   60          	ld	h, b
0x958B ++   29          	add	hl, hl
0x958C ++   11 00 00    	ld	de,_screen_line_starts
0x958F ++   19          	add	hl, de
0x9590 ++   79          	ld	a, c
0x9591 ++   E5          	push	hl
0x9592 ++   F5          	push	af
0x9593 ++   33          	inc	sp
0x9594 ++   AF          	xor	a, a
0x9595 ++   F5          	push	af
0x9596 ++   33          	inc	sp
0x9597 ++   CD 00 00    	call	_zx_pxy2saddr_callee
0x959A ++   EB          	ex	de, hl
0x959B ++   E1          	pop	hl
0x959C ++   73          	ld	(hl), e
0x959D ++   23          	inc	hl
0x959E ++   72          	ld	(hl), d
0x959F ++               ;draw_swarm.c:18: for(i=0;i<192;i++)
0x959F ++   03          	inc	bc
0x95A0 ++   79          	ld	a, c
0x95A1 ++   D6 C0       	sub	a,0xc0
0x95A3 ++   78          	ld	a, b
0x95A4 ++   DE 00       	sbc	a,0x00
0x95A6 ++   38 E1       	jr	C,l_init_draw_swarm_00103
0x95A8 ++               ;draw_swarm.c:21: for(i=0;i<256;i++)
0x95A8 ++   01 00 00    	ld	bc,0x0000
0x95AB ++               l_init_draw_swarm_00105:
0x95AB ++               ;draw_swarm.c:24: screen_line_offsets[i] = i >> 3;
0x95AB ++   21 80 01    	ld	hl,_screen_line_offsets
0x95AE ++   09          	add	hl, bc
0x95AF ++   59          	ld	e, c
0x95B0 ++   50          	ld	d, b
0x95B1 ++   CB 3A       	srl	d
0x95B3 ++   CB 1B       	rr	e
0x95B5 ++   CB 3A       	srl	d
0x95B7 ++   CB 1B       	rr	e
0x95B9 ++   CB 3A       	srl	d
0x95BB ++   CB 1B       	rr	e
0x95BD ++   73          	ld	(hl), e
0x95BE ++               ;draw_swarm.c:25: screen_byte_values[i]  = 0x80 >> (i & 0x07);
0x95BE ++   21 80 02    	ld	hl,_screen_byte_values
0x95C1 ++   09          	add	hl, bc
0x95C2 ++   79          	ld	a, c
0x95C3 ++   E6 07       	and	a,0x07
0x95C5 ++   F5          	push	af
0x95C6 ++   11 80 00    	ld	de,0x0080
0x95C9 ++   F1          	pop	af
0x95CA ++   3C          	inc	a
0x95CB ++   18 04       	jr	l_init_draw_swarm_00127
0x95CD ++               l_init_draw_swarm_00126:
0x95CD ++   CB 2A       	sra	d
0x95CF ++   CB 1B       	rr	e
0x95D1 ++               l_init_draw_swarm_00127:
0x95D1 ++   3D          	dec	a
0x95D2 ++   20 F9       	jr	NZ, l_init_draw_swarm_00126
0x95D4 ++   73          	ld	(hl), e
0x95D5 ++               ;draw_swarm.c:21: for(i=0;i<256;i++)
0x95D5 ++   03          	inc	bc
0x95D6 ++   78          	ld	a, b
0x95D7 ++   D6 01       	sub	a,0x01
0x95D9 ++   38 D0       	jr	C,l_init_draw_swarm_00105
0x95DB ++               ;draw_swarm.c:27: }
0x95DB ++   C9          	ret
0x95DC ++               	SECTION code_compiler
0x95DC ++               ;draw_swarm.c:57: void draw_swarm_or(void)
0x95DC ++               ;	---------------------------------
0x95DC ++               ; Function draw_swarm_or
0x95DC ++               ; ---------------------------------
0x95DC ++               _draw_swarm_or:
0x95DC ++   DD E5       	push	ix
0x95DE ++   DD 21 00 00 	ld	ix,0
0x95E2 ++   DD 39       	add	ix,sp
0x95E4 ++   F5          	push	af
0x95E5 ++   F5          	push	af
0x95E6 ++               ;draw_swarm.c:62: for( i=0; i<MAX_IN_SWARM; i++ )
0x95E6 ++   0E 00       	ld	c,0x00
0x95E8 ++               l_draw_swarm_or_00113:
0x95E8 ++               ;draw_swarm.c:64: if( !swarm[i].active )
0x95E8 ++   06 00       	ld	b,0x00
0x95EA ++   69          	ld	l, c
0x95EB ++   60          	ld	h, b
0x95EC ++   29          	add	hl, hl
0x95ED ++   09          	add	hl, bc
0x95EE ++   29          	add	hl, hl
0x95EF ++   29          	add	hl, hl
0x95F0 ++   09          	add	hl, bc
0x95F1 ++   EB          	ex	de, hl
0x95F2 ++   21 00 00    	ld	hl,_swarm
0x95F5 ++   19          	add	hl, de
0x95F6 ++   EB          	ex	de, hl
0x95F7 ++   21 0C 00    	ld	hl,0x000c
0x95FA ++   19          	add	hl, de
0x95FB ++   E3          	ex	(sp), hl
0x95FC ++   E1          	pop	hl
0x95FD ++   E5          	push	hl
0x95FE ++   7E          	ld	a, (hl)
0x95FF ++   B7          	or	a, a
0x9600 ++   CA 02 01    	jp	Z, l_draw_swarm_or_00111
0x9603 ++               ;draw_swarm.c:67: if( swarm[i].x_i < 0 || swarm[i].x_i > 255
0x9603 ++   1A          	ld	a, (de)
0x9604 ++   DD 77 FE    	ld	(ix-2),a
0x9607 ++   13          	inc	de
0x9608 ++   1A          	ld	a, (de)
0x9609 ++   DD 77 FF    	ld	(ix-1),a
0x960C ++   1B          	dec	de
0x960D ++   DD CB FF 7E 	bit	7,(ix-1)
0x9611 ++   20 75       	jr	NZ,l_draw_swarm_or_00111
0x9613 ++   3E FF       	ld	a,0xff
0x9615 ++   DD BE FE    	cp	a,(ix-2)
0x9618 ++   3E 00       	ld	a,0x00
0x961A ++   DD 9E FF    	sbc	a,(ix-1)
0x961D ++   E2 9C 00    	jp	PO, l_draw_swarm_or_00152
0x9620 ++   EE 80       	xor	a,0x80
0x9622 ++               l_draw_swarm_or_00152:
0x9622 ++   FA 02 01    	jp	M, l_draw_swarm_or_00111
0x9625 ++               ;draw_swarm.c:69: swarm[i].y_i < 0 || swarm[i].y_i > 191 )
0x9625 ++   EB          	ex	de, hl
0x9626 ++   23          	inc	hl
0x9627 ++   23          	inc	hl
0x9628 ++   5E          	ld	e, (hl)
0x9629 ++   23          	inc	hl
0x962A ++   46          	ld	b, (hl)
0x962B ++   CB 78       	bit	7, b
0x962D ++   20 59       	jr	NZ,l_draw_swarm_or_00111
0x962F ++   3E BF       	ld	a,0xbf
0x9631 ++   BB          	cp	a, e
0x9632 ++   3E 00       	ld	a,0x00
0x9634 ++   98          	sbc	a, b
0x9635 ++   E2 B4 00    	jp	PO, l_draw_swarm_or_00153
0x9638 ++   EE 80       	xor	a,0x80
0x963A ++               l_draw_swarm_or_00153:
0x963A ++   FA 02 01    	jp	M, l_draw_swarm_or_00111
0x963D ++               ;draw_swarm.c:72: uint8_t x = swarm[i].x_i;
0x963D ++   DD 7E FE    	ld	a,(ix-2)
0x9640 ++   DD 77 FF    	ld	(ix-1),a
0x9643 ++               ;draw_swarm.c:73: uint8_t y = swarm[i].y_i;
0x9643 ++               ;draw_swarm.c:75: if( *(zx_pxy2aaddr(x,y)) == PAPER_RED )
0x9643 ++   7B          	ld	a, e
0x9644 ++   F5          	push	af
0x9645 ++   33          	inc	sp
0x9646 ++   DD 7E FF    	ld	a,(ix-1)
0x9649 ++   F5          	push	af
0x964A ++   33          	inc	sp
0x964B ++   CD 00 00    	call	_zx_pxy2aaddr_callee
0x964E ++   7E          	ld	a, (hl)
0x964F ++   D6 10       	sub	a,0x10
0x9651 ++   20 06       	jr	NZ,l_draw_swarm_or_00109
0x9653 ++               ;draw_swarm.c:77: swarm[i].active = 0;
0x9653 ++   E1          	pop	hl
0x9654 ++   E5          	push	hl
0x9655 ++   36 00       	ld	(hl),0x00
0x9657 ++   18 2F       	jr	l_draw_swarm_or_00111
0x9659 ++               l_draw_swarm_or_00109:
0x9659 ++               ;draw_swarm.c:81: uint8_t *scr_byte = screen_line_starts[y];
0x9659 ++   6B          	ld	l, e
0x965A ++   26 00       	ld	h,0x00
0x965C ++   29          	add	hl, hl
0x965D ++   11 00 00    	ld	de,_screen_line_starts
0x9660 ++   19          	add	hl, de
0x9661 ++   5E          	ld	e, (hl)
0x9662 ++   23          	inc	hl
0x9663 ++   56          	ld	d, (hl)
0x9664 ++               ;draw_swarm.c:82: scr_byte += screen_line_offsets[x];
0x9664 ++   3E 80       	ld	a, +((_screen_line_offsets) & 0xFF)
0x9666 ++   DD 86 FF    	add	a,(ix-1)
0x9669 ++   6F          	ld	l, a
0x966A ++   3E 01       	ld	a, +((_screen_line_offsets) / 256)
0x966C ++   CE 00       	adc	a,0x00
0x966E ++   67          	ld	h, a
0x966F ++   6E          	ld	l, (hl)
0x9670 ++   26 00       	ld	h,0x00
0x9672 ++   19          	add	hl, de
0x9673 ++   EB          	ex	de, hl
0x9674 ++               ;draw_swarm.c:84: *scr_byte |= screen_byte_values[x];
0x9674 ++   1A          	ld	a, (de)
0x9675 ++   DD 77 FE    	ld	(ix-2),a
0x9678 ++   DD 7E FF    	ld	a,(ix-1)
0x967B ++   C6 80       	add	a, +((_screen_byte_values) & 0xFF)
0x967D ++   6F          	ld	l, a
0x967E ++   3E 00       	ld	a,0x00
0x9680 ++   CE 02       	adc	a, +((_screen_byte_values) / 256)
0x9682 ++   67          	ld	h, a
0x9683 ++   7E          	ld	a, (hl)
0x9684 ++   DD B6 FE    	or	a,(ix-2)
0x9687 ++   12          	ld	(de), a
0x9688 ++               l_draw_swarm_or_00111:
0x9688 ++               ;draw_swarm.c:62: for( i=0; i<MAX_IN_SWARM; i++ )
0x9688 ++   0C          	inc	c
0x9689 ++   79          	ld	a, c
0x968A ++   D6 0A       	sub	a,0x0a
0x968C ++   DA 62 00    	jp	C, l_draw_swarm_or_00113
0x968F ++               ;draw_swarm.c:87: }
0x968F ++   DD F9       	ld	sp, ix
0x9691 ++   DD E1       	pop	ix
0x9693 ++   C9          	ret
0x9694 ++               	SECTION code_compiler
0x9694 ++               ;draw_swarm.c:90: void clear_swarm(void)
0x9694 ++               ;	---------------------------------
0x9694 ++               ; Function clear_swarm
0x9694 ++               ; ---------------------------------
0x9694 ++               _clear_swarm:
0x9694 ++   DD E5       	push	ix
0x9696 ++   DD 21 00 00 	ld	ix,0
0x969A ++   DD 39       	add	ix,sp
0x969C ++   3B          	dec	sp
0x969D ++               ;draw_swarm.c:95: for( i=0; i<MAX_IN_SWARM; i++ )
0x969D ++   DD 36 FF 00 	ld	(ix-1),0x00
0x96A1 ++               l_clear_swarm_00110:
0x96A1 ++               ;draw_swarm.c:97: if( !previous_swarm[i].active )
0x96A1 ++   DD 4E FF    	ld	c,(ix-1)
0x96A4 ++   06 00       	ld	b,0x00
0x96A6 ++   69          	ld	l, c
0x96A7 ++   60          	ld	h, b
0x96A8 ++   29          	add	hl, hl
0x96A9 ++   09          	add	hl, bc
0x96AA ++   29          	add	hl, hl
0x96AB ++   29          	add	hl, hl
0x96AC ++   09          	add	hl, bc
0x96AD ++   EB          	ex	de, hl
0x96AE ++   21 00 00    	ld	hl,_previous_swarm
0x96B1 ++   19          	add	hl, de
0x96B2 ++   EB          	ex	de, hl
0x96B3 ++   21 0C 00    	ld	hl,12
0x96B6 ++   19          	add	hl,de
0x96B7 ++   7E          	ld	a, (hl)
0x96B8 ++   B7          	or	a, a
0x96B9 ++   28 3A       	jr	Z,l_clear_swarm_00108
0x96BB ++               ;draw_swarm.c:100: if( previous_swarm[i].x_i < 0 || previous_swarm[i].x_i > 255
0x96BB ++   6B          	ld	l, e
0x96BC ++   62          	ld	h, d
0x96BD ++   4E          	ld	c, (hl)
0x96BE ++   23          	inc	hl
0x96BF ++   46          	ld	b, (hl)
0x96C0 ++   CB 78       	bit	7, b
0x96C2 ++   20 31       	jr	NZ,l_clear_swarm_00108
0x96C4 ++   3E FF       	ld	a,0xff
0x96C6 ++   B9          	cp	a, c
0x96C7 ++   3E 00       	ld	a,0x00
0x96C9 ++   98          	sbc	a, b
0x96CA ++   E2 49 01    	jp	PO, l_clear_swarm_00144
0x96CD ++   EE 80       	xor	a,0x80
0x96CF ++               l_clear_swarm_00144:
0x96CF ++   FA 6F 01    	jp	M, l_clear_swarm_00108
0x96D2 ++               ;draw_swarm.c:102: previous_swarm[i].y_i < 0 || previous_swarm[i].y_i > 191 )
0x96D2 ++   EB          	ex	de, hl
0x96D3 ++   23          	inc	hl
0x96D4 ++   23          	inc	hl
0x96D5 ++   5E          	ld	e, (hl)
0x96D6 ++   23          	inc	hl
0x96D7 ++   56          	ld	d, (hl)
0x96D8 ++   CB 7A       	bit	7, d
0x96DA ++   20 19       	jr	NZ,l_clear_swarm_00108
0x96DC ++   3E BF       	ld	a,0xbf
0x96DE ++   BB          	cp	a, e
0x96DF ++   3E 00       	ld	a,0x00
0x96E1 ++   9A          	sbc	a, d
0x96E2 ++   E2 61 01    	jp	PO, l_clear_swarm_00145
0x96E5 ++   EE 80       	xor	a,0x80
0x96E7 ++               l_clear_swarm_00145:
0x96E7 ++   FA 6F 01    	jp	M, l_clear_swarm_00108
0x96EA ++               ;draw_swarm.c:105: uint8_t x = previous_swarm[i].x_i;
0x96EA ++   79          	ld	a, c
0x96EB ++               ;draw_swarm.c:106: uint8_t y = previous_swarm[i].y_i;
0x96EB ++               ;draw_swarm.c:108: uint8_t *scr_byte = zx_pxy2saddr( x, y );
0x96EB ++   63          	ld	h, e
0x96EC ++   E5          	push	hl
0x96ED ++   33          	inc	sp
0x96EE ++   F5          	push	af
0x96EF ++   33          	inc	sp
0x96F0 ++   CD 00 00    	call	_zx_pxy2saddr_callee
0x96F3 ++               ;draw_swarm.c:110: *scr_byte = 0;
0x96F3 ++   36 00       	ld	(hl),0x00
0x96F5 ++               l_clear_swarm_00108:
0x96F5 ++               ;draw_swarm.c:95: for( i=0; i<MAX_IN_SWARM; i++ )
0x96F5 ++   DD 34 FF    	inc	(ix-1)
0x96F8 ++   DD 7E FF    	ld	a,(ix-1)
0x96FB ++   D6 0A       	sub	a,0x0a
0x96FD ++   38 A2       	jr	C,l_clear_swarm_00110
0x96FF ++               ;draw_swarm.c:112: }
0x96FF ++   33          	inc	sp
0x9700 ++   DD E1       	pop	ix
0x9702 ++   C9          	ret
0x9703 ++               	SECTION code_compiler
0x9703 ++               ;draw_swarm.c:115: void draw_player( uint8_t x, uint8_t y )
0x9703 ++               ;	---------------------------------
0x9703 ++               ; Function draw_player
0x9703 ++               ; ---------------------------------
0x9703 ++               _draw_player:
0x9703 ++   DD E5       	push	ix
0x9705 ++   DD 21 00 00 	ld	ix,0
0x9709 ++   DD 39       	add	ix,sp
0x970B ++   21 F8 FF    	ld	hl, -8
0x970E ++   39          	add	hl, sp
0x970F ++   F9          	ld	sp, hl
0x9710 ++               ;draw_swarm.c:117: uint8_t *scr_byte = screen_line_starts[y];
0x9710 ++   DD 7E 05    	ld	a,(ix+5)
0x9713 ++   DD 77 F8    	ld	(ix-8),a
0x9716 ++   DD 36 F9 00 	ld	(ix-7),0x00
0x971A ++   E1          	pop	hl
0x971B ++   E5          	push	hl
0x971C ++   29          	add	hl, hl
0x971D ++   11 00 00    	ld	de,_screen_line_starts
0x9720 ++   19          	add	hl, de
0x9721 ++   4E          	ld	c, (hl)
0x9722 ++   23          	inc	hl
0x9723 ++   46          	ld	b, (hl)
0x9724 ++               ;draw_swarm.c:119: *(scr_byte + screen_line_offsets[x])   |= screen_byte_values[x];
0x9724 ++   3E 80       	ld	a, +((_screen_line_offsets) & 0xFF)
0x9726 ++   DD 86 04    	add	a,(ix+4)
0x9729 ++   DD 77 FA    	ld	(ix-6),a
0x972C ++   3E 01       	ld	a, +((_screen_line_offsets) / 256)
0x972E ++   CE 00       	adc	a,0x00
0x9730 ++   DD 77 FB    	ld	(ix-5),a
0x9733 ++   DD 6E FA    	ld	l,(ix-6)
0x9736 ++   DD 66 FB    	ld	h,(ix-5)
0x9739 ++   7E          	ld	a, (hl)
0x973A ++   81          	add	a, c
0x973B ++   5F          	ld	e, a
0x973C ++   3E 00       	ld	a,0x00
0x973E ++   88          	adc	a, b
0x973F ++   57          	ld	d, a
0x9740 ++   1A          	ld	a, (de)
0x9741 ++   DD 77 FF    	ld	(ix-1),a
0x9744 ++   3E 80       	ld	a, +((_screen_byte_values) & 0xFF)
0x9746 ++   DD 86 04    	add	a,(ix+4)
0x9749 ++   DD 77 FC    	ld	(ix-4),a
0x974C ++   3E 02       	ld	a, +((_screen_byte_values) / 256)
0x974E ++   CE 00       	adc	a,0x00
0x9750 ++   DD 77 FD    	ld	(ix-3),a
0x9753 ++   DD 6E FC    	ld	l,(ix-4)
0x9756 ++   DD 66 FD    	ld	h,(ix-3)
0x9759 ++   7E          	ld	a, (hl)
0x975A ++   DD B6 FF    	or	a,(ix-1)
0x975D ++   12          	ld	(de), a
0x975E ++               ;draw_swarm.c:120: *(scr_byte + screen_line_offsets[x+1]) |= screen_byte_values[x+1];
0x975E ++   DD 5E 04    	ld	e,(ix+4)
0x9761 ++   16 00       	ld	d,0x00
0x9763 ++   13          	inc	de
0x9764 ++   21 80 01    	ld	hl,_screen_line_offsets
0x9767 ++   19          	add	hl, de
0x9768 ++   DD 75 FE    	ld	(ix-2),l
0x976B ++   DD 74 FF    	ld	(ix-1),h
0x976E ++   DD 6E FE    	ld	l,(ix-2)
0x9771 ++   DD 66 FF    	ld	h,(ix-1)
0x9774 ++   6E          	ld	l, (hl)
0x9775 ++   26 00       	ld	h,0x00
0x9777 ++   09          	add	hl, bc
0x9778 ++   4E          	ld	c, (hl)
0x9779 ++   3E 80       	ld	a, +((_screen_byte_values) & 0xFF)
0x977B ++   83          	add	a, e
0x977C ++   5F          	ld	e, a
0x977D ++   3E 02       	ld	a, +((_screen_byte_values) / 256)
0x977F ++   8A          	adc	a, d
0x9780 ++   57          	ld	d, a
0x9781 ++   1A          	ld	a, (de)
0x9782 ++   B1          	or	a, c
0x9783 ++   77          	ld	(hl), a
0x9784 ++               ;draw_swarm.c:122: scr_byte = screen_line_starts[y+1];
0x9784 ++   E1          	pop	hl
0x9785 ++   E5          	push	hl
0x9786 ++   23          	inc	hl
0x9787 ++   29          	add	hl, hl
0x9788 ++   01 00 00    	ld	bc,_screen_line_starts
0x978B ++   09          	add	hl, bc
0x978C ++   4E          	ld	c, (hl)
0x978D ++   23          	inc	hl
0x978E ++   46          	ld	b, (hl)
0x978F ++               ;draw_swarm.c:124: *(scr_byte + screen_line_offsets[x])   |= screen_byte_values[x];
0x978F ++   DD 6E FA    	ld	l,(ix-6)
0x9792 ++   DD 66 FB    	ld	h,(ix-5)
0x9795 ++   7E          	ld	a, (hl)
0x9796 ++   81          	add	a, c
0x9797 ++   DD 77 FA    	ld	(ix-6),a
0x979A ++   3E 00       	ld	a,0x00
0x979C ++   88          	adc	a, b
0x979D ++   DD 77 FB    	ld	(ix-5),a
0x97A0 ++   DD 6E FA    	ld	l,(ix-6)
0x97A3 ++   DD 66 FB    	ld	h,(ix-5)
0x97A6 ++   7E          	ld	a, (hl)
0x97A7 ++   DD 6E FC    	ld	l,(ix-4)
0x97AA ++   DD 66 FD    	ld	h,(ix-3)
0x97AD ++   6E          	ld	l, (hl)
0x97AE ++   B5          	or	a, l
0x97AF ++   DD 6E FA    	ld	l,(ix-6)
0x97B2 ++   DD 66 FB    	ld	h,(ix-5)
0x97B5 ++   77          	ld	(hl), a
0x97B6 ++               ;draw_swarm.c:125: *(scr_byte + screen_line_offsets[x+1]) |= screen_byte_values[x+1];
0x97B6 ++   DD 6E FE    	ld	l,(ix-2)
0x97B9 ++   DD 66 FF    	ld	h,(ix-1)
0x97BC ++   6E          	ld	l, (hl)
0x97BD ++   26 00       	ld	h,0x00
0x97BF ++   09          	add	hl, bc
0x97C0 ++   4E          	ld	c, (hl)
0x97C1 ++   1A          	ld	a, (de)
0x97C2 ++   B1          	or	a, c
0x97C3 ++   77          	ld	(hl), a
0x97C4 ++               ;draw_swarm.c:126: }
0x97C4 ++   DD F9       	ld	sp, ix
0x97C6 ++   DD E1       	pop	ix
0x97C8 ++   C9          	ret
0x97C9 ++               	SECTION code_compiler
0x97C9 ++               ;draw_swarm.c:129: void clear_player( uint8_t x, uint8_t y )
0x97C9 ++               ;	---------------------------------
0x97C9 ++               ; Function clear_player
0x97C9 ++               ; ---------------------------------
0x97C9 ++               _clear_player:
0x97C9 ++   DD E5       	push	ix
0x97CB ++   DD 21 00 00 	ld	ix,0
0x97CF ++   DD 39       	add	ix,sp
0x97D1 ++   F5          	push	af
0x97D2 ++   F5          	push	af
0x97D3 ++               ;draw_swarm.c:131: uint8_t *scr_byte = screen_line_starts[y];
0x97D3 ++   DD 7E 05    	ld	a,(ix+5)
0x97D6 ++   DD 77 FC    	ld	(ix-4),a
0x97D9 ++   DD 36 FD 00 	ld	(ix-3),0x00
0x97DD ++   E1          	pop	hl
0x97DE ++   E5          	push	hl
0x97DF ++   29          	add	hl, hl
0x97E0 ++   11 00 00    	ld	de,_screen_line_starts
0x97E3 ++   19          	add	hl, de
0x97E4 ++   4E          	ld	c, (hl)
0x97E5 ++   23          	inc	hl
0x97E6 ++   46          	ld	b, (hl)
0x97E7 ++               ;draw_swarm.c:133: *(scr_byte + screen_line_offsets[x])   = 0;
0x97E7 ++   3E 80       	ld	a, +((_screen_line_offsets) & 0xFF)
0x97E9 ++   DD 86 04    	add	a,(ix+4)
0x97EC ++   DD 77 FE    	ld	(ix-2),a
0x97EF ++   3E 01       	ld	a, +((_screen_line_offsets) / 256)
0x97F1 ++   CE 00       	adc	a,0x00
0x97F3 ++   DD 77 FF    	ld	(ix-1),a
0x97F6 ++   DD 6E FE    	ld	l,(ix-2)
0x97F9 ++   DD 66 FF    	ld	h,(ix-1)
0x97FC ++   6E          	ld	l, (hl)
0x97FD ++   26 00       	ld	h,0x00
0x97FF ++   09          	add	hl, bc
0x9800 ++   36 00       	ld	(hl),0x00
0x9802 ++               ;draw_swarm.c:134: *(scr_byte + screen_line_offsets[x+1]) = 0;
0x9802 ++   DD 5E 04    	ld	e,(ix+4)
0x9805 ++   16 00       	ld	d,0x00
0x9807 ++   13          	inc	de
0x9808 ++   21 80 01    	ld	hl,_screen_line_offsets
0x980B ++   19          	add	hl, de
0x980C ++   EB          	ex	de, hl
0x980D ++   1A          	ld	a, (de)
0x980E ++   6F          	ld	l, a
0x980F ++   26 00       	ld	h,0x00
0x9811 ++   09          	add	hl, bc
0x9812 ++   36 00       	ld	(hl),0x00
0x9814 ++               ;draw_swarm.c:136: scr_byte = screen_line_starts[y+1];
0x9814 ++   E1          	pop	hl
0x9815 ++   E5          	push	hl
0x9816 ++   23          	inc	hl
0x9817 ++   29          	add	hl, hl
0x9818 ++   01 00 00    	ld	bc,_screen_line_starts
0x981B ++   09          	add	hl, bc
0x981C ++   4E          	ld	c, (hl)
0x981D ++   23          	inc	hl
0x981E ++   46          	ld	b, (hl)
0x981F ++               ;draw_swarm.c:138: *(scr_byte + screen_line_offsets[x])   = 0;
0x981F ++   DD 6E FE    	ld	l,(ix-2)
0x9822 ++   DD 66 FF    	ld	h,(ix-1)
0x9825 ++   6E          	ld	l, (hl)
0x9826 ++   26 00       	ld	h,0x00
0x9828 ++   09          	add	hl, bc
0x9829 ++   36 00       	ld	(hl),0x00
0x982B ++               ;draw_swarm.c:139: *(scr_byte + screen_line_offsets[x+1]) = 0;
0x982B ++   1A          	ld	a, (de)
0x982C ++   6F          	ld	l, a
0x982D ++   26 00       	ld	h,0x00
0x982F ++   09          	add	hl, bc
0x9830 ++   36 00       	ld	(hl),0x00
0x9832 ++               ;draw_swarm.c:140: }
0x9832 ++   DD F9       	ld	sp, ix
0x9834 ++   DD E1       	pop	ix
0x9836 ++   C9          	ret
0x9837 ++               	SECTION IGNORE
0x9586 ++               
0x0000 ++ 1     0000              MODULE main_c
0x0000 ++               LINE 0, "main.c"
0x0000 ++               
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; File Created by SDCC : free open source ANSI-C Compiler
0x0000 ++               ; Version 4.1.6 #12555 (Linux)
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; Processed by Z88DK
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               
0x0000 ++               	EXTERN __divschar
0x0000 ++               	EXTERN __divschar_callee
0x0000 ++               	EXTERN __divsint
0x0000 ++               	EXTERN __divsint_callee
0x0000 ++               	EXTERN __divslong
0x0000 ++               	EXTERN __divslong_callee
0x0000 ++               	EXTERN __divslonglong
0x0000 ++               	EXTERN __divslonglong_callee
0x0000 ++               	EXTERN __divsuchar
0x0000 ++               	EXTERN __divsuchar_callee
0x0000 ++               	EXTERN __divuchar
0x0000 ++               	EXTERN __divuchar_callee
0x0000 ++               	EXTERN __divuint
0x0000 ++               	EXTERN __divuint_callee
0x0000 ++               	EXTERN __divulong
0x0000 ++               	EXTERN __divulong_callee
0x0000 ++               	EXTERN __divulonglong
0x0000 ++               	EXTERN __divulonglong_callee
0x0000 ++               	EXTERN __divuschar
0x0000 ++               	EXTERN __divuschar_callee
0x0000 ++               	EXTERN __modschar
0x0000 ++               	EXTERN __modschar_callee
0x0000 ++               	EXTERN __modsint
0x0000 ++               	EXTERN __modsint_callee
0x0000 ++               	EXTERN __modslong
0x0000 ++               	EXTERN __modslong_callee
0x0000 ++               	EXTERN __modslonglong
0x0000 ++               	EXTERN __modslonglong_callee
0x0000 ++               	EXTERN __modsuchar
0x0000 ++               	EXTERN __modsuchar_callee
0x0000 ++               	EXTERN __moduchar
0x0000 ++               	EXTERN __moduchar_callee
0x0000 ++               	EXTERN __moduint
0x0000 ++               	EXTERN __moduint_callee
0x0000 ++               	EXTERN __modulong
0x0000 ++               	EXTERN __modulong_callee
0x0000 ++               	EXTERN __modulonglong
0x0000 ++               	EXTERN __modulonglong_callee
0x0000 ++               	EXTERN __moduschar
0x0000 ++               	EXTERN __moduschar_callee
0x0000 ++               	EXTERN __mulint
0x0000 ++               	EXTERN __mulint_callee
0x0000 ++               	EXTERN __mullong
0x0000 ++               	EXTERN __mullong_callee
0x0000 ++               	EXTERN __mullonglong
0x0000 ++               	EXTERN __mullonglong_callee
0x0000 ++               	EXTERN __mulschar
0x0000 ++               	EXTERN __mulschar_callee
0x0000 ++               	EXTERN __mulsuchar
0x0000 ++               	EXTERN __mulsuchar_callee
0x0000 ++               	EXTERN __muluchar
0x0000 ++               	EXTERN __muluchar_callee
0x0000 ++               	EXTERN __muluschar
0x0000 ++               	EXTERN __muluschar_callee
0x0000 ++               	EXTERN __rlslonglong
0x0000 ++               	EXTERN __rlslonglong_callee
0x0000 ++               	EXTERN __rlulonglong
0x0000 ++               	EXTERN __rlulonglong_callee
0x0000 ++               	EXTERN __rrslonglong
0x0000 ++               	EXTERN __rrslonglong_callee
0x0000 ++               	EXTERN __rrulonglong
0x0000 ++               	EXTERN __rrulonglong_callee
0x0000 ++               	EXTERN ___sdcc_call_hl
0x0000 ++               	EXTERN ___sdcc_call_iy
0x0000 ++               	EXTERN ___sdcc_enter_ix
0x0000 ++               	EXTERN banked_call
0x0000 ++               	EXTERN _banked_ret
0x0000 ++               	EXTERN ___fs2schar
0x0000 ++               	EXTERN ___fs2schar_callee
0x0000 ++               	EXTERN ___fs2sint
0x0000 ++               	EXTERN ___fs2sint_callee
0x0000 ++               	EXTERN ___fs2slong
0x0000 ++               	EXTERN ___fs2slong_callee
0x0000 ++               	EXTERN ___fs2slonglong
0x0000 ++               	EXTERN ___fs2slonglong_callee
0x0000 ++               	EXTERN ___fs2uchar
0x0000 ++               	EXTERN ___fs2uchar_callee
0x0000 ++               	EXTERN ___fs2uint
0x0000 ++               	EXTERN ___fs2uint_callee
0x0000 ++               	EXTERN ___fs2ulong
0x0000 ++               	EXTERN ___fs2ulong_callee
0x0000 ++               	EXTERN ___fs2ulonglong
0x0000 ++               	EXTERN ___fs2ulonglong_callee
0x0000 ++               	EXTERN ___fsadd
0x0000 ++               	EXTERN ___fsadd_callee
0x0000 ++               	EXTERN ___fsdiv
0x0000 ++               	EXTERN ___fsdiv_callee
0x0000 ++               	EXTERN ___fseq
0x0000 ++               	EXTERN ___fseq_callee
0x0000 ++               	EXTERN ___fsgt
0x0000 ++               	EXTERN ___fsgt_callee
0x0000 ++               	EXTERN ___fslt
0x0000 ++               	EXTERN ___fslt_callee
0x0000 ++               	EXTERN ___fsmul
0x0000 ++               	EXTERN ___fsmul_callee
0x0000 ++               	EXTERN ___fsneq
0x0000 ++               	EXTERN ___fsneq_callee
0x0000 ++               	EXTERN ___fssub
0x0000 ++               	EXTERN ___fssub_callee
0x0000 ++               	EXTERN ___schar2fs
0x0000 ++               	EXTERN ___schar2fs_callee
0x0000 ++               	EXTERN ___sint2fs
0x0000 ++               	EXTERN ___sint2fs_callee
0x0000 ++               	EXTERN ___slong2fs
0x0000 ++               	EXTERN ___slong2fs_callee
0x0000 ++               	EXTERN ___slonglong2fs
0x0000 ++               	EXTERN ___slonglong2fs_callee
0x0000 ++               	EXTERN ___uchar2fs
0x0000 ++               	EXTERN ___uchar2fs_callee
0x0000 ++               	EXTERN ___uint2fs
0x0000 ++               	EXTERN ___uint2fs_callee
0x0000 ++               	EXTERN ___ulong2fs
0x0000 ++               	EXTERN ___ulong2fs_callee
0x0000 ++               	EXTERN ___ulonglong2fs
0x0000 ++               	EXTERN ___ulonglong2fs_callee
0x0000 ++               	EXTERN ____sdcc_2_copy_src_mhl_dst_deix
0x0000 ++               	EXTERN ____sdcc_2_copy_src_mhl_dst_bcix
0x0000 ++               	EXTERN ____sdcc_4_copy_src_mhl_dst_deix
0x0000 ++               	EXTERN ____sdcc_4_copy_src_mhl_dst_bcix
0x0000 ++               	EXTERN ____sdcc_4_copy_src_mhl_dst_mbc
0x0000 ++               	EXTERN ____sdcc_4_ldi_nosave_bc
0x0000 ++               	EXTERN ____sdcc_4_ldi_save_bc
0x0000 ++               	EXTERN ____sdcc_4_push_hlix
0x0000 ++               	EXTERN ____sdcc_4_push_mhl
0x0000 ++               	EXTERN ____sdcc_lib_setmem_hl
0x0000 ++               	EXTERN ____sdcc_ll_add_de_bc_hl
0x0000 ++               	EXTERN ____sdcc_ll_add_de_bc_hlix
0x0000 ++               	EXTERN ____sdcc_ll_add_de_hlix_bc
0x0000 ++               	EXTERN ____sdcc_ll_add_de_hlix_bcix
0x0000 ++               	EXTERN ____sdcc_ll_add_deix_bc_hl
0x0000 ++               	EXTERN ____sdcc_ll_add_deix_hlix
0x0000 ++               	EXTERN ____sdcc_ll_add_hlix_bc_deix
0x0000 ++               	EXTERN ____sdcc_ll_add_hlix_deix_bc
0x0000 ++               	EXTERN ____sdcc_ll_add_hlix_deix_bcix
0x0000 ++               	EXTERN ____sdcc_ll_asr_hlix_a
0x0000 ++               	EXTERN ____sdcc_ll_asr_mbc_a
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_de_dst_hlix
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_de_dst_hlsp
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_deix_dst_hl
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_deix_dst_hlix
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_deixm_dst_hlsp
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_desp_dst_hlsp
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_hl_dst_de
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_hlsp_dst_de
0x0000 ++               	EXTERN ____sdcc_ll_copy_src_hlsp_dst_deixm
0x0000 ++               	EXTERN ____sdcc_ll_lsl_hlix_a
0x0000 ++               	EXTERN ____sdcc_ll_lsl_mbc_a
0x0000 ++               	EXTERN ____sdcc_ll_lsr_hlix_a
0x0000 ++               	EXTERN ____sdcc_ll_lsr_mbc_a
0x0000 ++               	EXTERN ____sdcc_ll_push_hlix
0x0000 ++               	EXTERN ____sdcc_ll_push_mhl
0x0000 ++               	EXTERN ____sdcc_ll_sub_de_bc_hl
0x0000 ++               	EXTERN ____sdcc_ll_sub_de_bc_hlix
0x0000 ++               	EXTERN ____sdcc_ll_sub_de_hlix_bc
0x0000 ++               	EXTERN ____sdcc_ll_sub_de_hlix_bcix
0x0000 ++               	EXTERN ____sdcc_ll_sub_deix_bc_hl
0x0000 ++               	EXTERN ____sdcc_ll_sub_deix_hlix
0x0000 ++               	EXTERN ____sdcc_ll_sub_hlix_bc_deix
0x0000 ++               	EXTERN ____sdcc_ll_sub_hlix_deix_bc
0x0000 ++               	EXTERN ____sdcc_ll_sub_hlix_deix_bcix
0x0000 ++               	EXTERN ____sdcc_load_debc_deix
0x0000 ++               	EXTERN ____sdcc_load_dehl_deix
0x0000 ++               	EXTERN ____sdcc_load_debc_mhl
0x0000 ++               	EXTERN ____sdcc_load_hlde_mhl
0x0000 ++               	EXTERN ____sdcc_store_dehl_bcix
0x0000 ++               	EXTERN ____sdcc_store_debc_hlix
0x0000 ++               	EXTERN ____sdcc_store_debc_mhl
0x0000 ++               	EXTERN ____sdcc_cpu_pop_ei
0x0000 ++               	EXTERN ____sdcc_cpu_pop_ei_jp
0x0000 ++               	EXTERN ____sdcc_cpu_push_di
0x0000 ++               	EXTERN ____sdcc_outi
0x0000 ++               	EXTERN ____sdcc_outi_128
0x0000 ++               	EXTERN ____sdcc_outi_256
0x0000 ++               	EXTERN ____sdcc_ldi
0x0000 ++               	EXTERN ____sdcc_ldi_128
0x0000 ++               	EXTERN ____sdcc_ldi_256
0x0000 ++               	EXTERN ____sdcc_4_copy_srcd_hlix_dst_deix
0x0000 ++               	EXTERN ____sdcc_4_and_src_mbc_mhl_dst_deix
0x0000 ++               	EXTERN ____sdcc_4_or_src_mbc_mhl_dst_deix
0x0000 ++               	EXTERN ____sdcc_4_xor_src_mbc_mhl_dst_deix
0x0000 ++               	EXTERN ____sdcc_4_or_src_dehl_dst_bcix
0x0000 ++               	EXTERN ____sdcc_4_xor_src_dehl_dst_bcix
0x0000 ++               	EXTERN ____sdcc_4_and_src_dehl_dst_bcix
0x0000 ++               	EXTERN ____sdcc_4_xor_src_mbc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_or_src_mbc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_and_src_mbc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_cpl_src_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_xor_src_debc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_or_src_debc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_and_src_debc_mhl_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_and_src_debc_hlix_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_or_src_debc_hlix_dst_debc
0x0000 ++               	EXTERN ____sdcc_4_xor_src_debc_hlix_dst_debc
0x0000 ++               
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; Public variables in this module
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               	GLOBAL _main
0x0000 ++               	GLOBAL _setup_int
0x0000 ++               	GLOBAL __im2_isr_isr
0x0000 ++               	GLOBAL _isr
0x0000 ++               	GLOBAL _int_fired
0x0000 ++               	GLOBAL _random_values
0x0000 ++               	GLOBAL _move_to_player_y_i
0x0000 ++               	GLOBAL _move_to_player_x_i
0x0000 ++               	GLOBAL _previous_player_y_i
0x0000 ++               	GLOBAL _previous_player_x_i
0x0000 ++               	GLOBAL _player_y_i
0x0000 ++               	GLOBAL _player_x_i
0x0000 ++               	GLOBAL _previous_swarm
0x0000 ++               	GLOBAL _swarm
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; Externals used
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               	GLOBAL _draw_player
0x0000 ++               	GLOBAL _clear_player
0x0000 ++               	GLOBAL _clear_swarm
0x0000 ++               	GLOBAL _draw_swarm_or
0x0000 ++               	GLOBAL _draw_swarm
0x0000 ++               	GLOBAL _init_draw_swarm
0x0000 ++               	GLOBAL _z80_otdr_callee
0x0000 ++               	GLOBAL _z80_otdr
0x0000 ++               	GLOBAL _z80_otir_callee
0x0000 ++               	GLOBAL _z80_otir
0x0000 ++               	GLOBAL _z80_outp_callee
0x0000 ++               	GLOBAL _z80_outp
0x0000 ++               	GLOBAL _z80_indr_callee
0x0000 ++               	GLOBAL _z80_indr
0x0000 ++               	GLOBAL _z80_inir_callee
0x0000 ++               	GLOBAL _z80_inir
0x0000 ++               	GLOBAL _z80_inp_fastcall
0x0000 ++               	GLOBAL _z80_inp
0x0000 ++               	GLOBAL _z80_set_int_state_fastcall
0x0000 ++               	GLOBAL _z80_set_int_state
0x0000 ++               	GLOBAL _z80_get_int_state
0x0000 ++               	GLOBAL _z80_delay_tstate_fastcall
0x0000 ++               	GLOBAL _z80_delay_tstate
0x0000 ++               	GLOBAL _z80_delay_ms_fastcall
0x0000 ++               	GLOBAL _z80_delay_ms
0x0000 ++               	GLOBAL _im2_remove_generic_callback_callee
0x0000 ++               	GLOBAL _im2_remove_generic_callback
0x0000 ++               	GLOBAL _im2_prepend_generic_callback_callee
0x0000 ++               	GLOBAL _im2_prepend_generic_callback
0x0000 ++               	GLOBAL _im2_append_generic_callback_callee
0x0000 ++               	GLOBAL _im2_append_generic_callback
0x0000 ++               	GLOBAL _im2_create_generic_isr_8080_callee
0x0000 ++               	GLOBAL _im2_create_generic_isr_8080
0x0000 ++               	GLOBAL _im2_create_generic_isr_callee
0x0000 ++               	GLOBAL _im2_create_generic_isr
0x0000 ++               	GLOBAL _im2_install_isr_callee
0x0000 ++               	GLOBAL _im2_install_isr
0x0000 ++               	GLOBAL _im2_init_fastcall
0x0000 ++               	GLOBAL _im2_init
0x0000 ++               	GLOBAL _intrinsic_swap_word_32_fastcall
0x0000 ++               	GLOBAL _intrinsic_swap_word_32
0x0000 ++               	GLOBAL _intrinsic_swap_endian_32_fastcall
0x0000 ++               	GLOBAL _intrinsic_swap_endian_32
0x0000 ++               	GLOBAL _intrinsic_swap_endian_16_fastcall
0x0000 ++               	GLOBAL _intrinsic_swap_endian_16
0x0000 ++               	GLOBAL _intrinsic_return_de
0x0000 ++               	GLOBAL _intrinsic_return_bc
0x0000 ++               	GLOBAL _intrinsic_exx
0x0000 ++               	GLOBAL _intrinsic_ex_de_hl
0x0000 ++               	GLOBAL _intrinsic_nop
0x0000 ++               	GLOBAL _intrinsic_im_2
0x0000 ++               	GLOBAL _intrinsic_im_1
0x0000 ++               	GLOBAL _intrinsic_im_0
0x0000 ++               	GLOBAL _intrinsic_retn
0x0000 ++               	GLOBAL _intrinsic_reti
0x0000 ++               	GLOBAL _intrinsic_halt
0x0000 ++               	GLOBAL _intrinsic_ei
0x0000 ++               	GLOBAL _intrinsic_di
0x0000 ++               	GLOBAL _intrinsic_stub
0x0000 ++               	GLOBAL _intrinsic_ini
0x0000 ++               	GLOBAL _intrinsic_outi
0x0000 ++               	GLOBAL _intrinsic_ldi
0x0000 ++               	GLOBAL _vioctl_callee
0x0000 ++               	GLOBAL _vioctl
0x0000 ++               	GLOBAL _ioctl
0x0000 ++               	GLOBAL _isunorderedf16_callee
0x0000 ++               	GLOBAL _isunorderedf16
0x0000 ++               	GLOBAL _isnotequalf16_callee
0x0000 ++               	GLOBAL _isnotequalf16
0x0000 ++               	GLOBAL _islessgreaterf16_callee
0x0000 ++               	GLOBAL _islessgreaterf16
0x0000 ++               	GLOBAL _islessequalf16_callee
0x0000 ++               	GLOBAL _islessequalf16
0x0000 ++               	GLOBAL _islessf16_callee
0x0000 ++               	GLOBAL _islessf16
0x0000 ++               	GLOBAL _isgreaterequalf16_callee
0x0000 ++               	GLOBAL _isgreaterequalf16
0x0000 ++               	GLOBAL _isgreaterf16_callee
0x0000 ++               	GLOBAL _isgreaterf16
0x0000 ++               	GLOBAL _floorf16_fastcall
0x0000 ++               	GLOBAL _floorf16
0x0000 ++               	GLOBAL _ceilf16_fastcall
0x0000 ++               	GLOBAL _ceilf16
0x0000 ++               	GLOBAL _negf16_fastcall
0x0000 ++               	GLOBAL _negf16
0x0000 ++               	GLOBAL _fabsf16_fastcall
0x0000 ++               	GLOBAL _fabsf16
0x0000 ++               	GLOBAL _powf16_callee
0x0000 ++               	GLOBAL _powf16
0x0000 ++               	GLOBAL _log10f16_fastcall
0x0000 ++               	GLOBAL _log10f16
0x0000 ++               	GLOBAL _log2f16_fastcall
0x0000 ++               	GLOBAL _log2f16
0x0000 ++               	GLOBAL _logf16_fastcall
0x0000 ++               	GLOBAL _logf16
0x0000 ++               	GLOBAL _exp10f16_fastcall
0x0000 ++               	GLOBAL _exp10f16
0x0000 ++               	GLOBAL _exp2f16_fastcall
0x0000 ++               	GLOBAL _exp2f16
0x0000 ++               	GLOBAL _expf16_fastcall
0x0000 ++               	GLOBAL _expf16
0x0000 ++               	GLOBAL _tanf16_fastcall
0x0000 ++               	GLOBAL _tanf16
0x0000 ++               	GLOBAL _sinf16_fastcall
0x0000 ++               	GLOBAL _sinf16
0x0000 ++               	GLOBAL _cosf16_fastcall
0x0000 ++               	GLOBAL _cosf16
0x0000 ++               	GLOBAL _atan2f16_callee
0x0000 ++               	GLOBAL _atan2f16
0x0000 ++               	GLOBAL _atanf16_fastcall
0x0000 ++               	GLOBAL _atanf16
0x0000 ++               	GLOBAL _asinf16_fastcall
0x0000 ++               	GLOBAL _asinf16
0x0000 ++               	GLOBAL _acosf16_fastcall
0x0000 ++               	GLOBAL _acosf16
0x0000 ++               	GLOBAL _ldexpf16_callee
0x0000 ++               	GLOBAL _ldexpf16
0x0000 ++               	GLOBAL _frexpf16_callee
0x0000 ++               	GLOBAL _frexpf16
0x0000 ++               	GLOBAL _mul10f16_fastcall
0x0000 ++               	GLOBAL _mul10f16
0x0000 ++               	GLOBAL _mul2f16_fastcall
0x0000 ++               	GLOBAL _mul2f16
0x0000 ++               	GLOBAL _div2f16_fastcall
0x0000 ++               	GLOBAL _div2f16
0x0000 ++               	GLOBAL _sqrtf16_fastcall
0x0000 ++               	GLOBAL _sqrtf16
0x0000 ++               	GLOBAL _invsqrtf16_fastcall
0x0000 ++               	GLOBAL _invsqrtf16
0x0000 ++               	GLOBAL _invf16_fastcall
0x0000 ++               	GLOBAL _invf16
0x0000 ++               	GLOBAL _hypotf16_callee
0x0000 ++               	GLOBAL _hypotf16
0x0000 ++               	GLOBAL _polyf16_callee
0x0000 ++               	GLOBAL _polyf16
0x0000 ++               	GLOBAL _fmaf16_callee
0x0000 ++               	GLOBAL _fmaf16
0x0000 ++               	GLOBAL _divf16_callee
0x0000 ++               	GLOBAL _divf16
0x0000 ++               	GLOBAL _mulf16_callee
0x0000 ++               	GLOBAL _mulf16
0x0000 ++               	GLOBAL _subf16_callee
0x0000 ++               	GLOBAL _subf16
0x0000 ++               	GLOBAL _addf16_callee
0x0000 ++               	GLOBAL _addf16
0x0000 ++               	GLOBAL _f16_u32_fastcall
0x0000 ++               	GLOBAL _f16_u32
0x0000 ++               	GLOBAL _f16_u16_fastcall
0x0000 ++               	GLOBAL _f16_u16
0x0000 ++               	GLOBAL _f16_u8_fastcall
0x0000 ++               	GLOBAL _f16_u8
0x0000 ++               	GLOBAL _f16_i32_fastcall
0x0000 ++               	GLOBAL _f16_i32
0x0000 ++               	GLOBAL _f16_i16_fastcall
0x0000 ++               	GLOBAL _f16_i16
0x0000 ++               	GLOBAL _f16_i8_fastcall
0x0000 ++               	GLOBAL _f16_i8
0x0000 ++               	GLOBAL _u32_f16_fastcall
0x0000 ++               	GLOBAL _u32_f16
0x0000 ++               	GLOBAL _i32_f16_fastcall
0x0000 ++               	GLOBAL _i32_f16
0x0000 ++               	GLOBAL _u16_f16_fastcall
0x0000 ++               	GLOBAL _u16_f16
0x0000 ++               	GLOBAL _i16_f16_fastcall
0x0000 ++               	GLOBAL _i16_f16
0x0000 ++               	GLOBAL _f32_f16_fastcall
0x0000 ++               	GLOBAL _f32_f16
0x0000 ++               	GLOBAL _f16_f32_fastcall
0x0000 ++               	GLOBAL _f16_f32
0x0000 ++               	GLOBAL _f48_f16_fastcall
0x0000 ++               	GLOBAL _f48_f16
0x0000 ++               	GLOBAL _f16_f48_fastcall
0x0000 ++               	GLOBAL _f16_f48
0x0000 ++               	GLOBAL _poly_callee
0x0000 ++               	GLOBAL _poly
0x0000 ++               	GLOBAL _exp10_fastcall
0x0000 ++               	GLOBAL _exp10
0x0000 ++               	GLOBAL _mul10u_fastcall
0x0000 ++               	GLOBAL _mul10u
0x0000 ++               	GLOBAL _mul2_fastcall
0x0000 ++               	GLOBAL _mul2
0x0000 ++               	GLOBAL _div2_fastcall
0x0000 ++               	GLOBAL _div2
0x0000 ++               	GLOBAL _invsqrt_fastcall
0x0000 ++               	GLOBAL _invsqrt
0x0000 ++               	GLOBAL _inv_fastcall
0x0000 ++               	GLOBAL _inv
0x0000 ++               	GLOBAL _sqr_fastcall
0x0000 ++               	GLOBAL _sqr
0x0000 ++               	GLOBAL _neg_fastcall
0x0000 ++               	GLOBAL _neg
0x0000 ++               	GLOBAL _isunordered_callee
0x0000 ++               	GLOBAL _isunordered
0x0000 ++               	GLOBAL _islessgreater_callee
0x0000 ++               	GLOBAL _islessgreater
0x0000 ++               	GLOBAL _islessequal_callee
0x0000 ++               	GLOBAL _islessequal
0x0000 ++               	GLOBAL _isless_callee
0x0000 ++               	GLOBAL _isless
0x0000 ++               	GLOBAL _isgreaterequal_callee
0x0000 ++               	GLOBAL _isgreaterequal
0x0000 ++               	GLOBAL _isgreater_callee
0x0000 ++               	GLOBAL _isgreater
0x0000 ++               	GLOBAL _fma_callee
0x0000 ++               	GLOBAL _fma
0x0000 ++               	GLOBAL _fmin_callee
0x0000 ++               	GLOBAL _fmin
0x0000 ++               	GLOBAL _fmax_callee
0x0000 ++               	GLOBAL _fmax
0x0000 ++               	GLOBAL _fdim_callee
0x0000 ++               	GLOBAL _fdim
0x0000 ++               	GLOBAL _nexttoward_callee
0x0000 ++               	GLOBAL _nexttoward
0x0000 ++               	GLOBAL _nextafter_callee
0x0000 ++               	GLOBAL _nextafter
0x0000 ++               	GLOBAL _nan_fastcall
0x0000 ++               	GLOBAL _nan
0x0000 ++               	GLOBAL _copysign_callee
0x0000 ++               	GLOBAL _copysign
0x0000 ++               	GLOBAL _remquo_callee
0x0000 ++               	GLOBAL _remquo
0x0000 ++               	GLOBAL _remainder_callee
0x0000 ++               	GLOBAL _remainder
0x0000 ++               	GLOBAL _fmod_callee
0x0000 ++               	GLOBAL _fmod
0x0000 ++               	GLOBAL _modf_callee
0x0000 ++               	GLOBAL _modf
0x0000 ++               	GLOBAL _trunc_fastcall
0x0000 ++               	GLOBAL _trunc
0x0000 ++               	GLOBAL _lround_fastcall
0x0000 ++               	GLOBAL _lround
0x0000 ++               	GLOBAL _round_fastcall
0x0000 ++               	GLOBAL _round
0x0000 ++               	GLOBAL _lrint_fastcall
0x0000 ++               	GLOBAL _lrint
0x0000 ++               	GLOBAL _rint_fastcall
0x0000 ++               	GLOBAL _rint
0x0000 ++               	GLOBAL _nearbyint_fastcall
0x0000 ++               	GLOBAL _nearbyint
0x0000 ++               	GLOBAL _floor_fastcall
0x0000 ++               	GLOBAL _floor
0x0000 ++               	GLOBAL _ceil_fastcall
0x0000 ++               	GLOBAL _ceil
0x0000 ++               	GLOBAL _tgamma_fastcall
0x0000 ++               	GLOBAL _tgamma
0x0000 ++               	GLOBAL _lgamma_fastcall
0x0000 ++               	GLOBAL _lgamma
0x0000 ++               	GLOBAL _erfc_fastcall
0x0000 ++               	GLOBAL _erfc
0x0000 ++               	GLOBAL _erf_fastcall
0x0000 ++               	GLOBAL _erf
0x0000 ++               	GLOBAL _cbrt_fastcall
0x0000 ++               	GLOBAL _cbrt
0x0000 ++               	GLOBAL _sqrt_fastcall
0x0000 ++               	GLOBAL _sqrt
0x0000 ++               	GLOBAL _pow_callee
0x0000 ++               	GLOBAL _pow
0x0000 ++               	GLOBAL _hypot_callee
0x0000 ++               	GLOBAL _hypot
0x0000 ++               	GLOBAL _fabs_fastcall
0x0000 ++               	GLOBAL _fabs
0x0000 ++               	GLOBAL _logb_fastcall
0x0000 ++               	GLOBAL _logb
0x0000 ++               	GLOBAL _log2_fastcall
0x0000 ++               	GLOBAL _log2
0x0000 ++               	GLOBAL _log1p_fastcall
0x0000 ++               	GLOBAL _log1p
0x0000 ++               	GLOBAL _log10_fastcall
0x0000 ++               	GLOBAL _log10
0x0000 ++               	GLOBAL _log_fastcall
0x0000 ++               	GLOBAL _log
0x0000 ++               	GLOBAL _scalbln_callee
0x0000 ++               	GLOBAL _scalbln
0x0000 ++               	GLOBAL _scalbn_callee
0x0000 ++               	GLOBAL _scalbn
0x0000 ++               	GLOBAL _ldexp_callee
0x0000 ++               	GLOBAL _ldexp
0x0000 ++               	GLOBAL _ilogb_fastcall
0x0000 ++               	GLOBAL _ilogb
0x0000 ++               	GLOBAL _frexp_callee
0x0000 ++               	GLOBAL _frexp
0x0000 ++               	GLOBAL _expm1_fastcall
0x0000 ++               	GLOBAL _expm1
0x0000 ++               	GLOBAL _exp2_fastcall
0x0000 ++               	GLOBAL _exp2
0x0000 ++               	GLOBAL _exp_fastcall
0x0000 ++               	GLOBAL _exp
0x0000 ++               	GLOBAL _tanh_fastcall
0x0000 ++               	GLOBAL _tanh
0x0000 ++               	GLOBAL _sinh_fastcall
0x0000 ++               	GLOBAL _sinh
0x0000 ++               	GLOBAL _cosh_fastcall
0x0000 ++               	GLOBAL _cosh
0x0000 ++               	GLOBAL _atanh_fastcall
0x0000 ++               	GLOBAL _atanh
0x0000 ++               	GLOBAL _asinh_fastcall
0x0000 ++               	GLOBAL _asinh
0x0000 ++               	GLOBAL _acosh_fastcall
0x0000 ++               	GLOBAL _acosh
0x0000 ++               	GLOBAL _tan_fastcall
0x0000 ++               	GLOBAL _tan
0x0000 ++               	GLOBAL _sin_fastcall
0x0000 ++               	GLOBAL _sin
0x0000 ++               	GLOBAL _cos_fastcall
0x0000 ++               	GLOBAL _cos
0x0000 ++               	GLOBAL _atan2_callee
0x0000 ++               	GLOBAL _atan2
0x0000 ++               	GLOBAL _atan_fastcall
0x0000 ++               	GLOBAL _atan
0x0000 ++               	GLOBAL _asin_fastcall
0x0000 ++               	GLOBAL _asin
0x0000 ++               	GLOBAL _acos_fastcall
0x0000 ++               	GLOBAL _acos
0x0000 ++               	GLOBAL _in_mouse_kempston_wheel_delta
0x0000 ++               	GLOBAL _in_mouse_kempston_wheel
0x0000 ++               	GLOBAL _in_mouse_kempston_callee
0x0000 ++               	GLOBAL _in_mouse_kempston
0x0000 ++               	GLOBAL _in_mouse_kempston_setpos_callee
0x0000 ++               	GLOBAL _in_mouse_kempston_setpos
0x0000 ++               	GLOBAL _in_mouse_kempston_reset
0x0000 ++               	GLOBAL _in_mouse_kempston_init
0x0000 ++               	GLOBAL _in_mouse_amx_wheel_delta
0x0000 ++               	GLOBAL _in_mouse_amx_wheel
0x0000 ++               	GLOBAL _in_mouse_amx_callee
0x0000 ++               	GLOBAL _in_mouse_amx
0x0000 ++               	GLOBAL _in_mouse_amx_setpos_callee
0x0000 ++               	GLOBAL _in_mouse_amx_setpos
0x0000 ++               	GLOBAL _in_mouse_amx_reset
0x0000 ++               	GLOBAL _in_mouse_amx_init_callee
0x0000 ++               	GLOBAL _in_mouse_amx_init
0x0000 ++               	GLOBAL _in_stick_sinclair2
0x0000 ++               	GLOBAL _in_stick_sinclair1
0x0000 ++               	GLOBAL _in_stick_kempston
0x0000 ++               	GLOBAL _in_stick_fuller
0x0000 ++               	GLOBAL _in_stick_cursor
0x0000 ++               	GLOBAL _in_stick_keyboard_fastcall
0x0000 ++               	GLOBAL _in_stick_keyboard
0x0000 ++               	GLOBAL _in_wait_nokey
0x0000 ++               	GLOBAL _in_wait_key
0x0000 ++               	GLOBAL _in_test_key
0x0000 ++               	GLOBAL _in_pause_fastcall
0x0000 ++               	GLOBAL _in_pause
0x0000 ++               	GLOBAL _in_key_scancode_fastcall
0x0000 ++               	GLOBAL _in_key_scancode
0x0000 ++               	GLOBAL _in_key_pressed_fastcall
0x0000 ++               	GLOBAL _in_key_pressed
0x0000 ++               	GLOBAL _in_inkey
0x0000 ++               	GLOBAL _zx_pattern_fill_callee
0x0000 ++               	GLOBAL _zx_pattern_fill
0x0000 ++               	GLOBAL _zx_saddrpup_fastcall
0x0000 ++               	GLOBAL _zx_saddrpup
0x0000 ++               	GLOBAL _zx_saddrpright_callee
0x0000 ++               	GLOBAL _zx_saddrpright
0x0000 ++               	GLOBAL _zx_saddrpleft_callee
0x0000 ++               	GLOBAL _zx_saddrpleft
0x0000 ++               	GLOBAL _zx_saddrpdown_fastcall
0x0000 ++               	GLOBAL _zx_saddrpdown
0x0000 ++               	GLOBAL _zx_saddrcup_fastcall
0x0000 ++               	GLOBAL _zx_saddrcup
0x0000 ++               	GLOBAL _zx_saddrcright_fastcall
0x0000 ++               	GLOBAL _zx_saddrcright
0x0000 ++               	GLOBAL _zx_saddrcleft_fastcall
0x0000 ++               	GLOBAL _zx_saddrcleft
0x0000 ++               	GLOBAL _zx_saddrcdown_fastcall
0x0000 ++               	GLOBAL _zx_saddrcdown
0x0000 ++               	GLOBAL _zx_saddr2py_fastcall
0x0000 ++               	GLOBAL _zx_saddr2py
0x0000 ++               	GLOBAL _zx_saddr2px_fastcall
0x0000 ++               	GLOBAL _zx_saddr2px
0x0000 ++               	GLOBAL _zx_saddr2cy_fastcall
0x0000 ++               	GLOBAL _zx_saddr2cy
0x0000 ++               	GLOBAL _zx_saddr2cx_fastcall
0x0000 ++               	GLOBAL _zx_saddr2cx
0x0000 ++               	GLOBAL _zx_saddr2aaddr_fastcall
0x0000 ++               	GLOBAL _zx_saddr2aaddr
0x0000 ++               	GLOBAL _zx_py2saddr_fastcall
0x0000 ++               	GLOBAL _zx_py2saddr
0x0000 ++               	GLOBAL _zx_py2aaddr_fastcall
0x0000 ++               	GLOBAL _zx_py2aaddr
0x0000 ++               	GLOBAL _zx_pxy2saddr_callee
0x0000 ++               	GLOBAL _zx_pxy2saddr
0x0000 ++               	GLOBAL _zx_pxy2aaddr_callee
0x0000 ++               	GLOBAL _zx_pxy2aaddr
0x0000 ++               	GLOBAL _zx_px2bitmask_fastcall
0x0000 ++               	GLOBAL _zx_px2bitmask
0x0000 ++               	GLOBAL _zx_cy2saddr_fastcall
0x0000 ++               	GLOBAL _zx_cy2saddr
0x0000 ++               	GLOBAL _zx_cy2aaddr_fastcall
0x0000 ++               	GLOBAL _zx_cy2aaddr
0x0000 ++               	GLOBAL _zx_cxy2saddr_callee
0x0000 ++               	GLOBAL _zx_cxy2saddr
0x0000 ++               	GLOBAL _zx_cxy2aaddr_callee
0x0000 ++               	GLOBAL _zx_cxy2aaddr
0x0000 ++               	GLOBAL _zx_bitmask2px_fastcall
0x0000 ++               	GLOBAL _zx_bitmask2px
0x0000 ++               	GLOBAL _zx_aaddrcup_fastcall
0x0000 ++               	GLOBAL _zx_aaddrcup
0x0000 ++               	GLOBAL _zx_aaddrcright_fastcall
0x0000 ++               	GLOBAL _zx_aaddrcright
0x0000 ++               	GLOBAL _zx_aaddrcleft_fastcall
0x0000 ++               	GLOBAL _zx_aaddrcleft
0x0000 ++               	GLOBAL _zx_aaddrcdown_fastcall
0x0000 ++               	GLOBAL _zx_aaddrcdown
0x0000 ++               	GLOBAL _zx_aaddr2saddr_fastcall
0x0000 ++               	GLOBAL _zx_aaddr2saddr
0x0000 ++               	GLOBAL _zx_aaddr2py_fastcall
0x0000 ++               	GLOBAL _zx_aaddr2py
0x0000 ++               	GLOBAL _zx_aaddr2px_fastcall
0x0000 ++               	GLOBAL _zx_aaddr2px
0x0000 ++               	GLOBAL _zx_aaddr2cy_fastcall
0x0000 ++               	GLOBAL _zx_aaddr2cy
0x0000 ++               	GLOBAL _zx_aaddr2cx_fastcall
0x0000 ++               	GLOBAL _zx_aaddr2cx
0x0000 ++               	GLOBAL _zx_visit_wc_pix_callee
0x0000 ++               	GLOBAL _zx_visit_wc_pix
0x0000 ++               	GLOBAL _zx_visit_wc_attr_callee
0x0000 ++               	GLOBAL _zx_visit_wc_attr
0x0000 ++               	GLOBAL _zx_scroll_wc_up_pix_callee
0x0000 ++               	GLOBAL _zx_scroll_wc_up_pix
0x0000 ++               	GLOBAL _zx_scroll_wc_up_attr_callee
0x0000 ++               	GLOBAL _zx_scroll_wc_up_attr
0x0000 ++               	GLOBAL _zx_scroll_wc_up_callee
0x0000 ++               	GLOBAL _zx_scroll_wc_up
0x0000 ++               	GLOBAL _zx_scroll_up_pix_callee
0x0000 ++               	GLOBAL _zx_scroll_up_pix
0x0000 ++               	GLOBAL _zx_scroll_up_attr_callee
0x0000 ++               	GLOBAL _zx_scroll_up_attr
0x0000 ++               	GLOBAL _zx_scroll_up_callee
0x0000 ++               	GLOBAL _zx_scroll_up
0x0000 ++               	GLOBAL _zx_cls_wc_pix_callee
0x0000 ++               	GLOBAL _zx_cls_wc_pix
0x0000 ++               	GLOBAL _zx_cls_wc_attr_callee
0x0000 ++               	GLOBAL _zx_cls_wc_attr
0x0000 ++               	GLOBAL _zx_cls_wc_callee
0x0000 ++               	GLOBAL _zx_cls_wc
0x0000 ++               	GLOBAL _zx_cls_pix_fastcall
0x0000 ++               	GLOBAL _zx_cls_pix
0x0000 ++               	GLOBAL _zx_cls_attr_fastcall
0x0000 ++               	GLOBAL _zx_cls_attr
0x0000 ++               	GLOBAL _zx_cls_fastcall
0x0000 ++               	GLOBAL _zx_cls
0x0000 ++               	GLOBAL _zx_border_fastcall
0x0000 ++               	GLOBAL _zx_border
0x0000 ++               	GLOBAL _zx_tape_verify_block_callee
0x0000 ++               	GLOBAL _zx_tape_verify_block
0x0000 ++               	GLOBAL _zx_tape_save_block_callee
0x0000 ++               	GLOBAL _zx_tape_save_block
0x0000 ++               	GLOBAL _zx_tape_load_block_callee
0x0000 ++               	GLOBAL _zx_tape_load_block
0x0000 ++               	GLOBAL _vscanf_unlocked_callee
0x0000 ++               	GLOBAL _vscanf_unlocked
0x0000 ++               	GLOBAL _vprintf_unlocked_callee
0x0000 ++               	GLOBAL _vprintf_unlocked
0x0000 ++               	GLOBAL _vfscanf_unlocked_callee
0x0000 ++               	GLOBAL _vfscanf_unlocked
0x0000 ++               	GLOBAL _vfprintf_unlocked_callee
0x0000 ++               	GLOBAL _vfprintf_unlocked
0x0000 ++               	GLOBAL _ungetc_unlocked_callee
0x0000 ++               	GLOBAL _ungetc_unlocked
0x0000 ++               	GLOBAL _scanf_unlocked
0x0000 ++               	GLOBAL _rewind_unlocked_fastcall
0x0000 ++               	GLOBAL _rewind_unlocked
0x0000 ++               	GLOBAL _puts_unlocked_fastcall
0x0000 ++               	GLOBAL _puts_unlocked
0x0000 ++               	GLOBAL _putchar_unlocked_fastcall
0x0000 ++               	GLOBAL _putchar_unlocked
0x0000 ++               	GLOBAL _putc_unlocked_callee
0x0000 ++               	GLOBAL _putc_unlocked
0x0000 ++               	GLOBAL _printf_unlocked
0x0000 ++               	GLOBAL _gets_unlocked_fastcall
0x0000 ++               	GLOBAL _gets_unlocked
0x0000 ++               	GLOBAL _getline_unlocked_callee
0x0000 ++               	GLOBAL _getline_unlocked
0x0000 ++               	GLOBAL _getdelim_unlocked_callee
0x0000 ++               	GLOBAL _getdelim_unlocked
0x0000 ++               	GLOBAL _getchar_unlocked
0x0000 ++               	GLOBAL _getc_unlocked_fastcall
0x0000 ++               	GLOBAL _getc_unlocked
0x0000 ++               	GLOBAL _fwrite_unlocked_callee
0x0000 ++               	GLOBAL _fwrite_unlocked
0x0000 ++               	GLOBAL _ftell_unlocked_fastcall
0x0000 ++               	GLOBAL _ftell_unlocked
0x0000 ++               	GLOBAL _fsetpos_unlocked_callee
0x0000 ++               	GLOBAL _fsetpos_unlocked
0x0000 ++               	GLOBAL _fseek_unlocked_callee
0x0000 ++               	GLOBAL _fseek_unlocked
0x0000 ++               	GLOBAL _fscanf_unlocked
0x0000 ++               	GLOBAL _freopen_unlocked_callee
0x0000 ++               	GLOBAL _freopen_unlocked
0x0000 ++               	GLOBAL _fread_unlocked_callee
0x0000 ++               	GLOBAL _fread_unlocked
0x0000 ++               	GLOBAL _fputs_unlocked_callee
0x0000 ++               	GLOBAL _fputs_unlocked
0x0000 ++               	GLOBAL _fputc_unlocked_callee
0x0000 ++               	GLOBAL _fputc_unlocked
0x0000 ++               	GLOBAL _fprintf_unlocked
0x0000 ++               	GLOBAL _fileno_unlocked_fastcall
0x0000 ++               	GLOBAL _fileno_unlocked
0x0000 ++               	GLOBAL _fgets_unlocked_callee
0x0000 ++               	GLOBAL _fgets_unlocked
0x0000 ++               	GLOBAL _fgetpos_unlocked_callee
0x0000 ++               	GLOBAL _fgetpos_unlocked
0x0000 ++               	GLOBAL _fgetc_unlocked_fastcall
0x0000 ++               	GLOBAL _fgetc_unlocked
0x0000 ++               	GLOBAL _fflush_unlocked_fastcall
0x0000 ++               	GLOBAL _fflush_unlocked
0x0000 ++               	GLOBAL _ferror_unlocked_fastcall
0x0000 ++               	GLOBAL _ferror_unlocked
0x0000 ++               	GLOBAL _feof_unlocked_fastcall
0x0000 ++               	GLOBAL _feof_unlocked
0x0000 ++               	GLOBAL _fclose_unlocked_fastcall
0x0000 ++               	GLOBAL _fclose_unlocked
0x0000 ++               	GLOBAL _clearerr_unlocked_fastcall
0x0000 ++               	GLOBAL _clearerr_unlocked
0x0000 ++               	GLOBAL _vsscanf_callee
0x0000 ++               	GLOBAL _vsscanf
0x0000 ++               	GLOBAL _vsprintf_callee
0x0000 ++               	GLOBAL _vsprintf
0x0000 ++               	GLOBAL _vsnprintf_callee
0x0000 ++               	GLOBAL _vsnprintf
0x0000 ++               	GLOBAL _vscanf_callee
0x0000 ++               	GLOBAL _vscanf
0x0000 ++               	GLOBAL _vprintf_callee
0x0000 ++               	GLOBAL _vprintf
0x0000 ++               	GLOBAL _vfscanf_callee
0x0000 ++               	GLOBAL _vfscanf
0x0000 ++               	GLOBAL _vfprintf_callee
0x0000 ++               	GLOBAL _vfprintf
0x0000 ++               	GLOBAL _vasprintf_callee
0x0000 ++               	GLOBAL _vasprintf
0x0000 ++               	GLOBAL _ungetc_callee
0x0000 ++               	GLOBAL _ungetc
0x0000 ++               	GLOBAL _sscanf
0x0000 ++               	GLOBAL _sprintf
0x0000 ++               	GLOBAL _snprintf
0x0000 ++               	GLOBAL _scanf
0x0000 ++               	GLOBAL _rewind_fastcall
0x0000 ++               	GLOBAL _rewind
0x0000 ++               	GLOBAL _puts_fastcall
0x0000 ++               	GLOBAL _puts
0x0000 ++               	GLOBAL _putchar_fastcall
0x0000 ++               	GLOBAL _putchar
0x0000 ++               	GLOBAL _putc_callee
0x0000 ++               	GLOBAL _putc
0x0000 ++               	GLOBAL _printf
0x0000 ++               	GLOBAL _perror_fastcall
0x0000 ++               	GLOBAL _perror
0x0000 ++               	GLOBAL _open_memstream_callee
0x0000 ++               	GLOBAL _open_memstream
0x0000 ++               	GLOBAL _obstack_vprintf_callee
0x0000 ++               	GLOBAL _obstack_vprintf
0x0000 ++               	GLOBAL _obstack_printf
0x0000 ++               	GLOBAL _gets_fastcall
0x0000 ++               	GLOBAL _gets
0x0000 ++               	GLOBAL _getline_callee
0x0000 ++               	GLOBAL _getline
0x0000 ++               	GLOBAL _getdelim_callee
0x0000 ++               	GLOBAL _getdelim
0x0000 ++               	GLOBAL _getchar
0x0000 ++               	GLOBAL _getc_fastcall
0x0000 ++               	GLOBAL _getc
0x0000 ++               	GLOBAL _fwrite_callee
0x0000 ++               	GLOBAL _fwrite
0x0000 ++               	GLOBAL _funlockfile_fastcall
0x0000 ++               	GLOBAL _funlockfile
0x0000 ++               	GLOBAL _ftrylockfile_fastcall
0x0000 ++               	GLOBAL _ftrylockfile
0x0000 ++               	GLOBAL _ftell_fastcall
0x0000 ++               	GLOBAL _ftell
0x0000 ++               	GLOBAL _fsetpos_callee
0x0000 ++               	GLOBAL _fsetpos
0x0000 ++               	GLOBAL _fseek_callee
0x0000 ++               	GLOBAL _fseek
0x0000 ++               	GLOBAL _fscanf
0x0000 ++               	GLOBAL _freopen_callee
0x0000 ++               	GLOBAL _freopen
0x0000 ++               	GLOBAL _fread_callee
0x0000 ++               	GLOBAL _fread
0x0000 ++               	GLOBAL _fputs_callee
0x0000 ++               	GLOBAL _fputs
0x0000 ++               	GLOBAL _fputc_callee
0x0000 ++               	GLOBAL _fputc
0x0000 ++               	GLOBAL _fprintf
0x0000 ++               	GLOBAL _fopen_callee
0x0000 ++               	GLOBAL _fopen
0x0000 ++               	GLOBAL _fmemopen_callee
0x0000 ++               	GLOBAL _fmemopen
0x0000 ++               	GLOBAL _flockfile_fastcall
0x0000 ++               	GLOBAL _flockfile
0x0000 ++               	GLOBAL _fileno_fastcall
0x0000 ++               	GLOBAL _fileno
0x0000 ++               	GLOBAL _fgets_callee
0x0000 ++               	GLOBAL _fgets
0x0000 ++               	GLOBAL _fgetpos_callee
0x0000 ++               	GLOBAL _fgetpos
0x0000 ++               	GLOBAL _fgetc_fastcall
0x0000 ++               	GLOBAL _fgetc
0x0000 ++               	GLOBAL _fflush_fastcall
0x0000 ++               	GLOBAL _fflush
0x0000 ++               	GLOBAL _ferror_fastcall
0x0000 ++               	GLOBAL _ferror
0x0000 ++               	GLOBAL _feof_fastcall
0x0000 ++               	GLOBAL _feof
0x0000 ++               	GLOBAL _fdopen_callee
0x0000 ++               	GLOBAL _fdopen
0x0000 ++               	GLOBAL _fclose_fastcall
0x0000 ++               	GLOBAL _fclose
0x0000 ++               	GLOBAL _clearerr_fastcall
0x0000 ++               	GLOBAL _clearerr
0x0000 ++               	GLOBAL _asprintf
0x0000 ++               	GLOBAL __fmemopen__callee
0x0000 ++               	GLOBAL __fmemopen_
0x0000 ++               	GLOBAL _ffsll_callee
0x0000 ++               	GLOBAL _ffsll
0x0000 ++               	GLOBAL _strxfrm_callee
0x0000 ++               	GLOBAL _strxfrm
0x0000 ++               	GLOBAL _strupr_fastcall
0x0000 ++               	GLOBAL _strupr
0x0000 ++               	GLOBAL _strtok_r_callee
0x0000 ++               	GLOBAL _strtok_r
0x0000 ++               	GLOBAL _strtok_callee
0x0000 ++               	GLOBAL _strtok
0x0000 ++               	GLOBAL _strstrip_fastcall
0x0000 ++               	GLOBAL _strstrip
0x0000 ++               	GLOBAL _strstr_callee
0x0000 ++               	GLOBAL _strstr
0x0000 ++               	GLOBAL _strspn_callee
0x0000 ++               	GLOBAL _strspn
0x0000 ++               	GLOBAL _strsep_callee
0x0000 ++               	GLOBAL _strsep
0x0000 ++               	GLOBAL _strrstrip_fastcall
0x0000 ++               	GLOBAL _strrstrip
0x0000 ++               	GLOBAL _strrstr_callee
0x0000 ++               	GLOBAL _strrstr
0x0000 ++               	GLOBAL _strrspn_callee
0x0000 ++               	GLOBAL _strrspn
0x0000 ++               	GLOBAL _strrev_fastcall
0x0000 ++               	GLOBAL _strrev
0x0000 ++               	GLOBAL _strrcspn_callee
0x0000 ++               	GLOBAL _strrcspn
0x0000 ++               	GLOBAL _strrchr_callee
0x0000 ++               	GLOBAL _strrchr
0x0000 ++               	GLOBAL _strpbrk_callee
0x0000 ++               	GLOBAL _strpbrk
0x0000 ++               	GLOBAL _strnlen_callee
0x0000 ++               	GLOBAL _strnlen
0x0000 ++               	GLOBAL _strnicmp_callee
0x0000 ++               	GLOBAL _strnicmp
0x0000 ++               	GLOBAL _strndup_callee
0x0000 ++               	GLOBAL _strndup
0x0000 ++               	GLOBAL _strncpy_callee
0x0000 ++               	GLOBAL _strncpy
0x0000 ++               	GLOBAL _strncmp_callee
0x0000 ++               	GLOBAL _strncmp
0x0000 ++               	GLOBAL _strnchr_callee
0x0000 ++               	GLOBAL _strnchr
0x0000 ++               	GLOBAL _strncat_callee
0x0000 ++               	GLOBAL _strncat
0x0000 ++               	GLOBAL _strncasecmp_callee
0x0000 ++               	GLOBAL _strncasecmp
0x0000 ++               	GLOBAL _strlwr_fastcall
0x0000 ++               	GLOBAL _strlwr
0x0000 ++               	GLOBAL _strlen_fastcall
0x0000 ++               	GLOBAL _strlen
0x0000 ++               	GLOBAL _strlcpy_callee
0x0000 ++               	GLOBAL _strlcpy
0x0000 ++               	GLOBAL _strlcat_callee
0x0000 ++               	GLOBAL _strlcat
0x0000 ++               	GLOBAL _stricmp_callee
0x0000 ++               	GLOBAL _stricmp
0x0000 ++               	GLOBAL _strerror_fastcall
0x0000 ++               	GLOBAL _strerror
0x0000 ++               	GLOBAL _strdup_fastcall
0x0000 ++               	GLOBAL _strdup
0x0000 ++               	GLOBAL _strcspn_callee
0x0000 ++               	GLOBAL _strcspn
0x0000 ++               	GLOBAL _strcpy_callee
0x0000 ++               	GLOBAL _strcpy
0x0000 ++               	GLOBAL _strcoll_callee
0x0000 ++               	GLOBAL _strcoll
0x0000 ++               	GLOBAL _strcmp_callee
0x0000 ++               	GLOBAL _strcmp
0x0000 ++               	GLOBAL _strchrnul_callee
0x0000 ++               	GLOBAL _strchrnul
0x0000 ++               	GLOBAL _strchr_callee
0x0000 ++               	GLOBAL _strchr
0x0000 ++               	GLOBAL _strcat_callee
0x0000 ++               	GLOBAL _strcat
0x0000 ++               	GLOBAL _strcasecmp_callee
0x0000 ++               	GLOBAL _strcasecmp
0x0000 ++               	GLOBAL _stpncpy_callee
0x0000 ++               	GLOBAL _stpncpy
0x0000 ++               	GLOBAL _stpcpy_callee
0x0000 ++               	GLOBAL _stpcpy
0x0000 ++               	GLOBAL _memswap_callee
0x0000 ++               	GLOBAL _memswap
0x0000 ++               	GLOBAL _memset_wr_callee
0x0000 ++               	GLOBAL _memset_wr
0x0000 ++               	GLOBAL _memset_callee
0x0000 ++               	GLOBAL _memset
0x0000 ++               	GLOBAL _memrchr_callee
0x0000 ++               	GLOBAL _memrchr
0x0000 ++               	GLOBAL _memmove_callee
0x0000 ++               	GLOBAL _memmove
0x0000 ++               	GLOBAL _memmem_callee
0x0000 ++               	GLOBAL _memmem
0x0000 ++               	GLOBAL _memcpy_callee
0x0000 ++               	GLOBAL _memcpy
0x0000 ++               	GLOBAL _memcmp_callee
0x0000 ++               	GLOBAL _memcmp
0x0000 ++               	GLOBAL _memchr_callee
0x0000 ++               	GLOBAL _memchr
0x0000 ++               	GLOBAL _memccpy_callee
0x0000 ++               	GLOBAL _memccpy
0x0000 ++               	GLOBAL _ffsl_fastcall
0x0000 ++               	GLOBAL _ffsl
0x0000 ++               	GLOBAL _ffs_fastcall
0x0000 ++               	GLOBAL _ffs
0x0000 ++               	GLOBAL __strrstrip__fastcall
0x0000 ++               	GLOBAL __strrstrip_
0x0000 ++               	GLOBAL __memupr__callee
0x0000 ++               	GLOBAL __memupr_
0x0000 ++               	GLOBAL __memstrcpy__callee
0x0000 ++               	GLOBAL __memstrcpy_
0x0000 ++               	GLOBAL __memlwr__callee
0x0000 ++               	GLOBAL __memlwr_
0x0000 ++               	GLOBAL _rawmemchr_callee
0x0000 ++               	GLOBAL _rawmemchr
0x0000 ++               	GLOBAL _strnset_callee
0x0000 ++               	GLOBAL _strnset
0x0000 ++               	GLOBAL _strset_callee
0x0000 ++               	GLOBAL _strset
0x0000 ++               	GLOBAL _rindex_callee
0x0000 ++               	GLOBAL _rindex
0x0000 ++               	GLOBAL _index_callee
0x0000 ++               	GLOBAL _index
0x0000 ++               	GLOBAL _bzero_callee
0x0000 ++               	GLOBAL _bzero
0x0000 ++               	GLOBAL _bcopy_callee
0x0000 ++               	GLOBAL _bcopy
0x0000 ++               	GLOBAL _bcmp_callee
0x0000 ++               	GLOBAL _bcmp
0x0000 ++               	GLOBAL _ulltoa_callee
0x0000 ++               	GLOBAL _ulltoa
0x0000 ++               	GLOBAL _strtoull_callee
0x0000 ++               	GLOBAL _strtoull
0x0000 ++               	GLOBAL _strtoll_callee
0x0000 ++               	GLOBAL _strtoll
0x0000 ++               	GLOBAL _lltoa_callee
0x0000 ++               	GLOBAL _lltoa
0x0000 ++               	GLOBAL _llabs_callee
0x0000 ++               	GLOBAL _llabs
0x0000 ++               	GLOBAL __lldivu__callee
0x0000 ++               	GLOBAL __lldivu_
0x0000 ++               	GLOBAL __lldiv__callee
0x0000 ++               	GLOBAL __lldiv_
0x0000 ++               	GLOBAL _atoll_callee
0x0000 ++               	GLOBAL _atoll
0x0000 ++               	GLOBAL _realloc_unlocked_callee
0x0000 ++               	GLOBAL _realloc_unlocked
0x0000 ++               	GLOBAL _malloc_unlocked_fastcall
0x0000 ++               	GLOBAL _malloc_unlocked
0x0000 ++               	GLOBAL _free_unlocked_fastcall
0x0000 ++               	GLOBAL _free_unlocked
0x0000 ++               	GLOBAL _calloc_unlocked_callee
0x0000 ++               	GLOBAL _calloc_unlocked
0x0000 ++               	GLOBAL _aligned_alloc_unlocked_callee
0x0000 ++               	GLOBAL _aligned_alloc_unlocked
0x0000 ++               	GLOBAL _realloc_callee
0x0000 ++               	GLOBAL _realloc
0x0000 ++               	GLOBAL _malloc_fastcall
0x0000 ++               	GLOBAL _malloc
0x0000 ++               	GLOBAL _free_fastcall
0x0000 ++               	GLOBAL _free
0x0000 ++               	GLOBAL _calloc_callee
0x0000 ++               	GLOBAL _calloc
0x0000 ++               	GLOBAL _aligned_alloc_callee
0x0000 ++               	GLOBAL _aligned_alloc
0x0000 ++               	GLOBAL _utoa_callee
0x0000 ++               	GLOBAL _utoa
0x0000 ++               	GLOBAL _ultoa_callee
0x0000 ++               	GLOBAL _ultoa
0x0000 ++               	GLOBAL _system_fastcall
0x0000 ++               	GLOBAL _system
0x0000 ++               	GLOBAL _strtoul_callee
0x0000 ++               	GLOBAL _strtoul
0x0000 ++               	GLOBAL _strtol_callee
0x0000 ++               	GLOBAL _strtol
0x0000 ++               	GLOBAL _strtof_callee
0x0000 ++               	GLOBAL _strtof
0x0000 ++               	GLOBAL _strtod_callee
0x0000 ++               	GLOBAL _strtod
0x0000 ++               	GLOBAL _srand_fastcall
0x0000 ++               	GLOBAL _srand
0x0000 ++               	GLOBAL _rand
0x0000 ++               	GLOBAL _quick_exit_fastcall
0x0000 ++               	GLOBAL _quick_exit
0x0000 ++               	GLOBAL _qsort_callee
0x0000 ++               	GLOBAL _qsort
0x0000 ++               	GLOBAL _ltoa_callee
0x0000 ++               	GLOBAL _ltoa
0x0000 ++               	GLOBAL _labs_fastcall
0x0000 ++               	GLOBAL _labs
0x0000 ++               	GLOBAL _itoa_callee
0x0000 ++               	GLOBAL _itoa
0x0000 ++               	GLOBAL _ftoh_callee
0x0000 ++               	GLOBAL _ftoh
0x0000 ++               	GLOBAL _ftog_callee
0x0000 ++               	GLOBAL _ftog
0x0000 ++               	GLOBAL _ftoe_callee
0x0000 ++               	GLOBAL _ftoe
0x0000 ++               	GLOBAL _ftoa_callee
0x0000 ++               	GLOBAL _ftoa
0x0000 ++               	GLOBAL _exit_fastcall
0x0000 ++               	GLOBAL _exit
0x0000 ++               	GLOBAL _dtoh_callee
0x0000 ++               	GLOBAL _dtoh
0x0000 ++               	GLOBAL _dtog_callee
0x0000 ++               	GLOBAL _dtog
0x0000 ++               	GLOBAL _dtoe_callee
0x0000 ++               	GLOBAL _dtoe
0x0000 ++               	GLOBAL _dtoa_callee
0x0000 ++               	GLOBAL _dtoa
0x0000 ++               	GLOBAL _bsearch_callee
0x0000 ++               	GLOBAL _bsearch
0x0000 ++               	GLOBAL _atol_fastcall
0x0000 ++               	GLOBAL _atol
0x0000 ++               	GLOBAL _atoi_fastcall
0x0000 ++               	GLOBAL _atoi
0x0000 ++               	GLOBAL _atof_fastcall
0x0000 ++               	GLOBAL _atof
0x0000 ++               	GLOBAL _atexit_fastcall
0x0000 ++               	GLOBAL _atexit
0x0000 ++               	GLOBAL _at_quick_exit_fastcall
0x0000 ++               	GLOBAL _at_quick_exit
0x0000 ++               	GLOBAL _abs_fastcall
0x0000 ++               	GLOBAL _abs
0x0000 ++               	GLOBAL _abort
0x0000 ++               	GLOBAL __strtou__callee
0x0000 ++               	GLOBAL __strtou_
0x0000 ++               	GLOBAL __strtoi__callee
0x0000 ++               	GLOBAL __strtoi_
0x0000 ++               	GLOBAL __random_uniform_xor_8__fastcall
0x0000 ++               	GLOBAL __random_uniform_xor_8_
0x0000 ++               	GLOBAL __random_uniform_xor_32__fastcall
0x0000 ++               	GLOBAL __random_uniform_xor_32_
0x0000 ++               	GLOBAL __random_uniform_cmwc_8__fastcall
0x0000 ++               	GLOBAL __random_uniform_cmwc_8_
0x0000 ++               	GLOBAL __shellsort__callee
0x0000 ++               	GLOBAL __shellsort_
0x0000 ++               	GLOBAL __quicksort__callee
0x0000 ++               	GLOBAL __quicksort_
0x0000 ++               	GLOBAL __insertion_sort__callee
0x0000 ++               	GLOBAL __insertion_sort_
0x0000 ++               	GLOBAL __ldivu__callee
0x0000 ++               	GLOBAL __ldivu_
0x0000 ++               	GLOBAL __ldiv__callee
0x0000 ++               	GLOBAL __ldiv_
0x0000 ++               	GLOBAL __divu__callee
0x0000 ++               	GLOBAL __divu_
0x0000 ++               	GLOBAL __div__callee
0x0000 ++               	GLOBAL __div_
0x0000 ++               	GLOBAL _GLOBAL_ZX_PORT_7FFD
0x0000 ++               	GLOBAL _GLOBAL_ZX_PORT_1FFD
0x0000 ++               	GLOBAL _GLOBAL_ZX_PORT_FE
0x0000 ++               	GLOBAL _stderr
0x0000 ++               	GLOBAL _stdout
0x0000 ++               	GLOBAL _stdin
0x0000 ++               	GLOBAL __MAX_FOPEN
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; special function registers
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               defc _IO_FE	=	0x00fe
0x0000 ++               defc _IO_1FFD	=	0x1ffd
0x0000 ++               defc _IO_7FFD	=	0x7ffd
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               ; ram data
0x0000 ++               ;--------------------------------------------------------
0x0000 ++               	SECTION bss_compiler
0x984B ++               _swarm:
0x984B ++   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x984B ++       0020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x984B ++       0040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x984B ++       0060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x984B ++       0080  00 00 
0x984B ++                         	DEFS 130
0x98CD ++               _previous_swarm:
0x98CD ++   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x98CD ++       00A2  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x98CD ++       00C2  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x98CD ++       00E2  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x98CD ++       0102  00 00 
0x98CD ++                         	DEFS 130
0x994F ++               _player_x_i:
0x994F ++   00 00       	DEFS 2
0x9951 ++               _player_y_i:
0x9951 ++   00 00       	DEFS 2
0x9953 ++               _previous_player_x_i:
0x9953 ++   00 00       	DEFS 2
0x9955 ++               _previous_player_y_i:
0x9955 ++   00 00       	DEFS 2
0x9957 ++               _move_to_player_x_i:
0x9957 ++   00 00       	DEFS 2
0x9959 ++               _move_to_player_y_i:
0x9959 ++   00 00       	DEFS 2
0x995B ++               _random_values:
0x995B ++   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       0130  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       0150  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       0170  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       0190  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       01B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       01D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       01F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       0210  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       0230  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       0250  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       0270  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       0290  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       02B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       02D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++       02F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x995B ++                         	DEFS 510
0x9B59 ++               ;--------------------------------------------------------
0x9B59 ++               ; ram data
0x9B59 ++               ;--------------------------------------------------------
0x9B59 ++               
0x9B59 ++ 1123  030E              IF 0
0x9B59 ++ 1124  030E              
0x9B59 ++ 1125  030E              ; .area _INITIALIZED removed by z88dk
0x9B59 ++ 1126  030E              
0x9B59 ++ 1127  030E              _int_fired:
0x9B59 ++ 1128  030E              	DEFS 1
0x9B59 ++ 1129  030E              
0x9B59 ++ 1130  030E              ENDIF
0x9B59 ++               
0x9B59 ++               ;--------------------------------------------------------
0x9B59 ++               ; absolute external ram data
0x9B59 ++               ;--------------------------------------------------------
0x9B59 ++               	SECTION IGNORE
0x984B ++               ;--------------------------------------------------------
0x984B ++               ; global & static initialisations
0x984B ++               ;--------------------------------------------------------
0x984B ++               	SECTION code_crt_init
0x984B ++               ;--------------------------------------------------------
0x984B ++               ; Home
0x984B ++               ;--------------------------------------------------------
0x984B ++               	SECTION IGNORE
0x984B ++               ;--------------------------------------------------------
0x984B ++               ; code
0x984B ++               ;--------------------------------------------------------
0x984B ++               	SECTION code_compiler
0x984B ++               ;main.c:41: IM2_DEFINE_ISR(isr)
0x984B ++               ;	---------------------------------
0x984B ++               ; Function isr
0x984B ++               ; ---------------------------------
0x9052 ++               _isr:
0x9052 ++               	EXTERN asm_im2_push_registers
0x9052 ++               	EXTERN asm_im2_pop_registers
0x9052 ++   CD 00 00    	call asm_im2_push_registers
0x9055 ++   CD 0C 00    	call __im2_isr_isr
0x9058 ++   CD 00 00    	call asm_im2_pop_registers
0x905B ++   FB          	ei
0x905C ++   ED 4D       	reti
0x905E ++               ;main.c:41: {
0x905E ++               ;	---------------------------------
0x905E ++               ; Function _im2_isr_isr
0x905E ++               ; ---------------------------------
0x905E ++               __im2_isr_isr:
0x905E ++               ;main.c:43: int_fired = 1;
0x905E ++   21 00 00    	ld	hl,_int_fired
0x9061 ++   36 01       	ld	(hl),0x01
0x9063 ++               ;main.c:44: }
0x9063 ++   C9          	ret
0x9064 ++               	SECTION code_compiler
0x9064 ++               ;main.c:46: void setup_int(void)
0x9064 ++               ;	---------------------------------
0x9064 ++               ; Function setup_int
0x9064 ++               ; ---------------------------------
0x9064 ++               _setup_int:
0x9064 ++               ;main.c:48: memset( TABLE_ADDR, JUMP_POINT_HIGH_BYTE, 257 );
0x9064 ++   21 00 D0    	ld	hl,0xd000
0x9067 ++   36 D1       	ld	(hl),0xd1
0x9069 ++   5D          	ld	e, l
0x906A ++   54          	ld	d, h
0x906B ++   13          	inc	de
0x906C ++   01 00 01    	ld	bc,0x0100
0x906F ++   ED B0       	ldir
0x9071 ++               ;main.c:49: z80_bpoke( JUMP_POINT,   195 );
0x9071 ++   21 D1 D1    	ld	hl,0xd1d1
0x9074 ++   36 C3       	ld	(hl),0xc3
0x9076 ++               ;main.c:50: z80_wpoke( JUMP_POINT+1, (unsigned int)isr );
0x9076 ++   01 00 00    	ld	bc,_isr
0x9079 ++   ED 43 D2 D1 	ld	(0xd1d2), bc
0x907D ++               ;main.c:51: im2_init( TABLE_ADDR );
0x907D ++   21 00 D0    	ld	hl,0xd000
0x9080 ++   CD 00 00    	call	_im2_init_fastcall
0x9083 ++               ;main.c:52: intrinsic_ei();
0x9083 ++   FB          	ei
0x9084 ++               ;main.c:53: }
0x9084 ++   C9          	ret
0x9085 ++               	SECTION code_compiler
0x9085 ++               ;main.c:55: void main(void)
0x9085 ++               ;	---------------------------------
0x9085 ++               ; Function main
0x9085 ++               ; ---------------------------------
0x9085 ++               _main:
0x9085 ++   DD E5       	push	ix
0x9087 ++   DD 21 00 00 	ld	ix,0
0x908B ++   DD 39       	add	ix,sp
0x908D ++   21 F1 FF    	ld	hl, -15
0x9090 ++   39          	add	hl, sp
0x9091 ++   F9          	ld	sp, hl
0x9092 ++               ;main.c:59: zx_border( INK_BLUE );
0x9092 ++   2E 01       	ld	l,0x01
0x9094 ++   CD 00 00    	call	_zx_border_fastcall
0x9097 ++               ;main.c:60: zx_cls( PAPER_WHITE );
0x9097 ++   2E 38       	ld	l,0x38
0x9099 ++   CD 00 00    	call	_zx_cls_fastcall
0x909C ++               ;main.c:63: player_x_i = 128;
0x909C ++   21 04 01    	ld	hl,_player_x_i
0x909F ++   36 80       	ld	(hl),0x80
0x90A1 ++   AF          	xor	a, a
0x90A2 ++   23          	inc	hl
0x90A3 ++   77          	ld	(hl), a
0x90A4 ++               ;main.c:64: player_y_i =  96;
0x90A4 ++   21 06 01    	ld	hl,_player_y_i
0x90A7 ++   36 60       	ld	(hl),0x60
0x90A9 ++   AF          	xor	a, a
0x90AA ++   23          	inc	hl
0x90AB ++   77          	ld	(hl), a
0x90AC ++               ;main.c:66: *(zx_cxy2aaddr(5,5)) = PAPER_RED;
0x90AC ++   11 05 05    	ld	de,0x0505
0x90AF ++   D5          	push	de
0x90B0 ++   CD 00 00    	call	_zx_cxy2aaddr_callee
0x90B3 ++   36 10       	ld	(hl),0x10
0x90B5 ++               ;main.c:68: const half_t f100 = f16_i16( 100 );
0x90B5 ++   21 64 00    	ld	hl,0x0064
0x90B8 ++   CD 00 00    	call	_f16_i16_fastcall
0x90BB ++   E3          	ex	(sp), hl
0x90BC ++               ;main.c:71: for(i=0;i<255;i++)
0x90BC ++   DD 36 FF 00 	ld	(ix-1),0x00
0x90C0 ++               l_main_00130:
0x90C0 ++               ;main.c:73: random_values[i] = f16_f32( (rand()%100) / 1000.0 );
0x90C0 ++   DD 6E FF    	ld	l,(ix-1)
0x90C3 ++   26 00       	ld	h,0x00
0x90C5 ++   29          	add	hl, hl
0x90C6 ++   7D          	ld	a, l
0x90C7 ++   C6 10       	add	a, +((_random_values) & 0xFF)
0x90C9 ++   4F          	ld	c, a
0x90CA ++   7C          	ld	a, h
0x90CB ++   CE 01       	adc	a, +((_random_values) / 256)
0x90CD ++   47          	ld	b, a
0x90CE ++   C5          	push	bc
0x90CF ++   CD 00 00    	call	_rand
0x90D2 ++   11 64 00    	ld	de,0x0064
0x90D5 ++   D5          	push	de
0x90D6 ++   E5          	push	hl
0x90D7 ++   CD 00 00    	call	__modsint_callee
0x90DA ++   E5          	push	hl
0x90DB ++   CD 00 00    	call	___sint2fs_callee
0x90DE ++   E5          	push	hl
0x90DF ++   21 7A 44    	ld	hl,0x447a
0x90E2 ++   E3          	ex	(sp), hl
0x90E3 ++   E5          	push	hl
0x90E4 ++   21 00 00    	ld	hl,0x0000
0x90E7 ++   E3          	ex	(sp), hl
0x90E8 ++   D5          	push	de
0x90E9 ++   E5          	push	hl
0x90EA ++   CD 00 00    	call	___fsdiv_callee
0x90ED ++   CD 00 00    	call	_f16_f32_fastcall
0x90F0 ++   EB          	ex	de, hl
0x90F1 ++   C1          	pop	bc
0x90F2 ++   69          	ld	l, c
0x90F3 ++   60          	ld	h, b
0x90F4 ++   73          	ld	(hl), e
0x90F5 ++   23          	inc	hl
0x90F6 ++   72          	ld	(hl), d
0x90F7 ++               ;main.c:74: if( i & 0x01 )
0x90F7 ++   DD CB FF 46 	bit	0,(ix-1)
0x90FB ++   28 11       	jr	Z,l_main_00131
0x90FD ++               ;main.c:75: random_values[i] = negf16(random_values[i]);
0x90FD ++   69          	ld	l, c
0x90FE ++   60          	ld	h, b
0x90FF ++   5E          	ld	e, (hl)
0x9100 ++   23          	inc	hl
0x9101 ++   56          	ld	d, (hl)
0x9102 ++   C5          	push	bc
0x9103 ++   EB          	ex	de, hl
0x9104 ++   CD 00 00    	call	_negf16_fastcall
0x9107 ++   EB          	ex	de, hl
0x9108 ++   C1          	pop	bc
0x9109 ++   7B          	ld	a, e
0x910A ++   02          	ld	(bc), a
0x910B ++   03          	inc	bc
0x910C ++   7A          	ld	a, d
0x910D ++   02          	ld	(bc), a
0x910E ++               l_main_00131:
0x910E ++               ;main.c:71: for(i=0;i<255;i++)
0x910E ++   DD 34 FF    	inc	(ix-1)
0x9111 ++   DD 7E FF    	ld	a,(ix-1)
0x9114 ++   D6 FF       	sub	a,0xff
0x9116 ++   38 A8       	jr	C,l_main_00130
0x9118 ++               ;main.c:79: init_draw_swarm();
0x9118 ++   CD 00 00    	call	_init_draw_swarm
0x911B ++               ;main.c:83: for( i=0; i<MAX_IN_SWARM; i++ )
0x911B ++   DD 36 FF 00 	ld	(ix-1),0x00
0x911F ++               l_main_00132:
0x911F ++               ;main.c:85: swarm[i].x_i = rand()%256; swarm[i].x_f = f16_u16( swarm[i].x_i ); swarm[i].velocity_x = f16_f32( 0.1 );
0x911F ++   DD 4E FF    	ld	c,(ix-1)
0x9122 ++   06 00       	ld	b,0x00
0x9124 ++   69          	ld	l, c
0x9125 ++   60          	ld	h, b
0x9126 ++   29          	add	hl, hl
0x9127 ++   09          	add	hl, bc
0x9128 ++   29          	add	hl, hl
0x9129 ++   29          	add	hl, hl
0x912A ++   09          	add	hl, bc
0x912B ++   11 00 00    	ld	de,_swarm
0x912E ++   19          	add	hl, de
0x912F ++   E5          	push	hl
0x9130 ++   CD 00 00    	call	_rand
0x9133 ++   11 00 01    	ld	de,0x0100
0x9136 ++   D5          	push	de
0x9137 ++   E5          	push	hl
0x9138 ++   CD 00 00    	call	__modsint_callee
0x913B ++   EB          	ex	de, hl
0x913C ++   C1          	pop	bc
0x913D ++   69          	ld	l, c
0x913E ++   60          	ld	h, b
0x913F ++   73          	ld	(hl), e
0x9140 ++   23          	inc	hl
0x9141 ++   72          	ld	(hl), d
0x9142 ++   21 04 00    	ld	hl,0x0004
0x9145 ++   09          	add	hl, bc
0x9146 ++   E5          	push	hl
0x9147 ++   C5          	push	bc
0x9148 ++   EB          	ex	de, hl
0x9149 ++   CD 00 00    	call	_f16_u16_fastcall
0x914C ++   EB          	ex	de, hl
0x914D ++   C1          	pop	bc
0x914E ++   E1          	pop	hl
0x914F ++   73          	ld	(hl), e
0x9150 ++   23          	inc	hl
0x9151 ++   72          	ld	(hl), d
0x9152 ++   21 08 00    	ld	hl,0x0008
0x9155 ++   09          	add	hl, bc
0x9156 ++   E5          	push	hl
0x9157 ++   C5          	push	bc
0x9158 ++   21 CD CC    	ld	hl,0xcccd
0x915B ++   11 CC 3D    	ld	de,0x3dcc
0x915E ++   CD 00 00    	call	_f16_f32_fastcall
0x9161 ++   EB          	ex	de, hl
0x9162 ++   C1          	pop	bc
0x9163 ++   E1          	pop	hl
0x9164 ++   73          	ld	(hl), e
0x9165 ++   23          	inc	hl
0x9166 ++   72          	ld	(hl), d
0x9167 ++               ;main.c:86: swarm[i].y_i = rand()%192; swarm[i].y_f = f16_u16( swarm[i].y_i ); swarm[i].velocity_y = f16_f32( 0.1 );
0x9167 ++   69          	ld	l, c
0x9168 ++   60          	ld	h, b
0x9169 ++   23          	inc	hl
0x916A ++   23          	inc	hl
0x916B ++   E5          	push	hl
0x916C ++   C5          	push	bc
0x916D ++   CD 00 00    	call	_rand
0x9170 ++   EB          	ex	de, hl
0x9171 ++   C1          	pop	bc
0x9172 ++   E1          	pop	hl
0x9173 ++   E5          	push	hl
0x9174 ++   C5          	push	bc
0x9175 ++   E5          	push	hl
0x9176 ++   21 C0 00    	ld	hl,0x00c0
0x9179 ++   E3          	ex	(sp), hl
0x917A ++   D5          	push	de
0x917B ++   CD 00 00    	call	__modsint_callee
0x917E ++   EB          	ex	de, hl
0x917F ++   C1          	pop	bc
0x9180 ++   E1          	pop	hl
0x9181 ++   73          	ld	(hl), e
0x9182 ++   23          	inc	hl
0x9183 ++   72          	ld	(hl), d
0x9184 ++   21 06 00    	ld	hl,0x0006
0x9187 ++   09          	add	hl, bc
0x9188 ++   E5          	push	hl
0x9189 ++   C5          	push	bc
0x918A ++   EB          	ex	de, hl
0x918B ++   CD 00 00    	call	_f16_u16_fastcall
0x918E ++   EB          	ex	de, hl
0x918F ++   C1          	pop	bc
0x9190 ++   E1          	pop	hl
0x9191 ++   73          	ld	(hl), e
0x9192 ++   23          	inc	hl
0x9193 ++   72          	ld	(hl), d
0x9194 ++   21 0A 00    	ld	hl,0x000a
0x9197 ++   09          	add	hl, bc
0x9198 ++   E5          	push	hl
0x9199 ++   C5          	push	bc
0x919A ++   21 CD CC    	ld	hl,0xcccd
0x919D ++   11 CC 3D    	ld	de,0x3dcc
0x91A0 ++   CD 00 00    	call	_f16_f32_fastcall
0x91A3 ++   EB          	ex	de, hl
0x91A4 ++   C1          	pop	bc
0x91A5 ++   E1          	pop	hl
0x91A6 ++   73          	ld	(hl), e
0x91A7 ++   23          	inc	hl
0x91A8 ++   72          	ld	(hl), d
0x91A9 ++               ;main.c:87: swarm[i].active = 1;
0x91A9 ++   21 0C 00    	ld	hl,0x000c
0x91AC ++   09          	add	hl, bc
0x91AD ++   36 01       	ld	(hl),0x01
0x91AF ++               ;main.c:83: for( i=0; i<MAX_IN_SWARM; i++ )
0x91AF ++   DD 34 FF    	inc	(ix-1)
0x91B2 ++   DD 7E FF    	ld	a,(ix-1)
0x91B5 ++   D6 0A       	sub	a,0x0a
0x91B7 ++   DA CD 00    	jp	C, l_main_00132
0x91BA ++               ;main.c:91: intrinsic_ei();
0x91BA ++   FB          	ei
0x91BB ++               ;main.c:98: uint8_t bump=0;
0x91BB ++   DD 36 FF 00 	ld	(ix-1),0x00
0x91BF ++               ;main.c:99: while(1
0x91BF ++   DD 36 FD F4 	ld	(ix-3),0xf4
0x91C3 ++   DD 36 FE 01 	ld	(ix-2),0x01
0x91C7 ++               l_main_00126:
0x91C7 ++               ;main.c:103: )
0x91C7 ++   DD 6E FD    	ld	l,(ix-3)
0x91CA ++   DD 66 FE    	ld	h,(ix-2)
0x91CD ++   2B          	dec	hl
0x91CE ++   DD 75 FD    	ld	(ix-3),l
0x91D1 ++   DD 74 FE    	ld	(ix-2),h
0x91D4 ++   7C          	ld	a, h
0x91D5 ++   DD B6 FD    	or	a,(ix-3)
0x91D8 ++   CA 2F 05    	jp	Z, l_main_00135
0x91DB ++               ;main.c:107: if( in_key_pressed( IN_KEY_SCANCODE_q ) && player_y_i )       player_y_i-=2;
0x91DB ++   21 FB 01    	ld	hl,0x01fb
0x91DE ++   CD 00 00    	call	_in_key_pressed_fastcall
0x91E1 ++   7C          	ld	a, h
0x91E2 ++   B5          	or	a, l
0x91E3 ++   28 11       	jr	Z,l_main_00106
0x91E5 ++   21 07 01    	ld	hl,_player_y_i + 1
0x91E8 ++   7E          	ld	a, (hl)
0x91E9 ++   2B          	dec	hl
0x91EA ++   B6          	or	a, (hl)
0x91EB ++   28 09       	jr	Z,l_main_00106
0x91ED ++   7E          	ld	a, (hl)
0x91EE ++   C6 FE       	add	a,0xfe
0x91F0 ++   77          	ld	(hl), a
0x91F1 ++   23          	inc	hl
0x91F2 ++   7E          	ld	a, (hl)
0x91F3 ++   CE FF       	adc	a,0xff
0x91F5 ++   77          	ld	(hl), a
0x91F6 ++               l_main_00106:
0x91F6 ++               ;main.c:108: if( in_key_pressed( IN_KEY_SCANCODE_a ) && player_y_i < 190 ) player_y_i+=2;
0x91F6 ++   21 FD 01    	ld	hl,0x01fd
0x91F9 ++   CD 00 00    	call	_in_key_pressed_fastcall
0x91FC ++   7C          	ld	a, h
0x91FD ++   B5          	or	a, l
0x91FE ++   28 17       	jr	Z,l_main_00109
0x9200 ++   21 06 01    	ld	hl,_player_y_i
0x9203 ++   7E          	ld	a, (hl)
0x9204 ++   D6 BE       	sub	a,0xbe
0x9206 ++   23          	inc	hl
0x9207 ++   7E          	ld	a, (hl)
0x9208 ++   17          	rla
0x9209 ++   3F          	ccf
0x920A ++   1F          	rra
0x920B ++   DE 80       	sbc	a,0x80
0x920D ++   30 08       	jr	NC,l_main_00109
0x920F ++   2A 06 01    	ld	hl, (_player_y_i)
0x9212 ++   23          	inc	hl
0x9213 ++   23          	inc	hl
0x9214 ++   22 06 01    	ld	(_player_y_i), hl
0x9217 ++               l_main_00109:
0x9217 ++               ;main.c:109: if( in_key_pressed( IN_KEY_SCANCODE_o ) && player_x_i )       player_x_i-=2;
0x9217 ++   21 DF 02    	ld	hl,0x02df
0x921A ++   CD 00 00    	call	_in_key_pressed_fastcall
0x921D ++   7C          	ld	a, h
0x921E ++   B5          	or	a, l
0x921F ++   28 11       	jr	Z,l_main_00112
0x9221 ++   21 05 01    	ld	hl,_player_x_i + 1
0x9224 ++   7E          	ld	a, (hl)
0x9225 ++   2B          	dec	hl
0x9226 ++   B6          	or	a, (hl)
0x9227 ++   28 09       	jr	Z,l_main_00112
0x9229 ++   7E          	ld	a, (hl)
0x922A ++   C6 FE       	add	a,0xfe
0x922C ++   77          	ld	(hl), a
0x922D ++   23          	inc	hl
0x922E ++   7E          	ld	a, (hl)
0x922F ++   CE FF       	adc	a,0xff
0x9231 ++   77          	ld	(hl), a
0x9232 ++               l_main_00112:
0x9232 ++               ;main.c:110: if( in_key_pressed( IN_KEY_SCANCODE_p ) && player_x_i < 254 ) player_x_i+=2;
0x9232 ++   21 DF 01    	ld	hl,0x01df
0x9235 ++   CD 00 00    	call	_in_key_pressed_fastcall
0x9238 ++   7C          	ld	a, h
0x9239 ++   B5          	or	a, l
0x923A ++   28 17       	jr	Z,l_main_00154
0x923C ++   21 04 01    	ld	hl,_player_x_i
0x923F ++   7E          	ld	a, (hl)
0x9240 ++   D6 FE       	sub	a,0xfe
0x9242 ++   23          	inc	hl
0x9243 ++   7E          	ld	a, (hl)
0x9244 ++   17          	rla
0x9245 ++   3F          	ccf
0x9246 ++   1F          	rra
0x9247 ++   DE 80       	sbc	a,0x80
0x9249 ++   30 08       	jr	NC,l_main_00154
0x924B ++   2A 04 01    	ld	hl, (_player_x_i)
0x924E ++   23          	inc	hl
0x924F ++   23          	inc	hl
0x9250 ++   22 04 01    	ld	(_player_x_i), hl
0x9253 ++               ;main.c:112: for( i=0; i < MAX_IN_SWARM; i++ )
0x9253 ++               l_main_00154:
0x9253 ++   11 00 00    	ld	de,0x0000
0x9256 ++               l_main_00134:
0x9256 ++               ;main.c:114: if( !swarm[i].active )
0x9256 ++   D5          	push	de
0x9257 ++   6B          	ld	l, e
0x9258 ++   62          	ld	h, d
0x9259 ++   29          	add	hl, hl
0x925A ++   19          	add	hl, de
0x925B ++   29          	add	hl, hl
0x925C ++   29          	add	hl, hl
0x925D ++   19          	add	hl, de
0x925E ++   D1          	pop	de
0x925F ++               ;main.c:132: move_to_player_x_i = player_x_i - swarm[i].x_i;
0x925F ++   01 00 00    	ld	bc,_swarm
0x9262 ++   09          	add	hl,bc
0x9263 ++               ;main.c:114: if( !swarm[i].active )
0x9263 ++   DD 75 F3    	ld	(ix-13),l
0x9266 ++   DD 74 F4    	ld	(ix-12),h
0x9269 ++   01 0C 00    	ld	bc,12
0x926C ++   09          	add	hl,bc
0x926D ++   7E          	ld	a, (hl)
0x926E ++   B7          	or	a, a
0x926F ++   CA D8 04    	jp	Z, l_main_00124
0x9272 ++               ;main.c:122: if( bump++ & 0x04 )
0x9272 ++   DD 6E FF    	ld	l,(ix-1)
0x9275 ++   DD 34 FF    	inc	(ix-1)
0x9278 ++               ;main.c:124: swarm[i].velocity_x = addf16( swarm[i].velocity_x, random_values[rand()&0xff] );
0x9278 ++   DD 7E F3    	ld	a,(ix-13)
0x927B ++   C6 08       	add	a,0x08
0x927D ++   4F          	ld	c, a
0x927E ++   DD 7E F4    	ld	a,(ix-12)
0x9281 ++   CE 00       	adc	a,0x00
0x9283 ++   47          	ld	b, a
0x9284 ++               ;main.c:125: swarm[i].velocity_y = addf16( swarm[i].velocity_y, random_values[rand()&0xff] );
0x9284 ++   DD 7E F3    	ld	a,(ix-13)
0x9287 ++   C6 0A       	add	a,0x0a
0x9289 ++   DD 77 F5    	ld	(ix-11),a
0x928C ++   DD 7E F4    	ld	a,(ix-12)
0x928F ++   CE 00       	adc	a,0x00
0x9291 ++   DD 77 F6    	ld	(ix-10),a
0x9294 ++               ;main.c:122: if( bump++ & 0x04 )
0x9294 ++   CB 55       	bit	2, l
0x9296 ++   CA CF 02    	jp	Z,l_main_00120
0x9299 ++               ;main.c:124: swarm[i].velocity_x = addf16( swarm[i].velocity_x, random_values[rand()&0xff] );
0x9299 ++   C5          	push	bc
0x929A ++   D5          	push	de
0x929B ++   CD 00 00    	call	_rand
0x929E ++   D1          	pop	de
0x929F ++   C1          	pop	bc
0x92A0 ++   26 00       	ld	h,0x00
0x92A2 ++   29          	add	hl, hl
0x92A3 ++   D5          	push	de
0x92A4 ++   11 10 01    	ld	de,_random_values
0x92A7 ++   19          	add	hl, de
0x92A8 ++   D1          	pop	de
0x92A9 ++   7E          	ld	a, (hl)
0x92AA ++   DD 77 FB    	ld	(ix-5),a
0x92AD ++   23          	inc	hl
0x92AE ++   7E          	ld	a, (hl)
0x92AF ++   DD 77 FC    	ld	(ix-4),a
0x92B2 ++   69          	ld	l, c
0x92B3 ++   60          	ld	h, b
0x92B4 ++   7E          	ld	a, (hl)
0x92B5 ++   23          	inc	hl
0x92B6 ++   66          	ld	h, (hl)
0x92B7 ++   6F          	ld	l, a
0x92B8 ++   C5          	push	bc
0x92B9 ++   D5          	push	de
0x92BA ++   E5          	push	hl
0x92BB ++   DD 6E FB    	ld	l,(ix-5)
0x92BE ++   DD 66 FC    	ld	h,(ix-4)
0x92C1 ++   E3          	ex	(sp), hl
0x92C2 ++   E5          	push	hl
0x92C3 ++   CD 00 00    	call	_addf16_callee
0x92C6 ++   DD 75 FB    	ld	(ix-5),l
0x92C9 ++   DD 74 FC    	ld	(ix-4),h
0x92CC ++   D1          	pop	de
0x92CD ++   C1          	pop	bc
0x92CE ++   69          	ld	l, c
0x92CF ++   60          	ld	h, b
0x92D0 ++   DD 7E FB    	ld	a,(ix-5)
0x92D3 ++   77          	ld	(hl), a
0x92D4 ++   23          	inc	hl
0x92D5 ++   DD 7E FC    	ld	a,(ix-4)
0x92D8 ++   77          	ld	(hl), a
0x92D9 ++               ;main.c:125: swarm[i].velocity_y = addf16( swarm[i].velocity_y, random_values[rand()&0xff] );
0x92D9 ++   C5          	push	bc
0x92DA ++   D5          	push	de
0x92DB ++   CD 00 00    	call	_rand
0x92DE ++   D1          	pop	de
0x92DF ++   C1          	pop	bc
0x92E0 ++   26 00       	ld	h,0x00
0x92E2 ++   29          	add	hl, hl
0x92E3 ++   D5          	push	de
0x92E4 ++   11 10 01    	ld	de,_random_values
0x92E7 ++   19          	add	hl, de
0x92E8 ++   D1          	pop	de
0x92E9 ++   7E          	ld	a, (hl)
0x92EA ++   DD 77 FB    	ld	(ix-5),a
0x92ED ++   23          	inc	hl
0x92EE ++   7E          	ld	a, (hl)
0x92EF ++   DD 77 FC    	ld	(ix-4),a
0x92F2 ++   DD 6E F5    	ld	l,(ix-11)
0x92F5 ++   DD 66 F6    	ld	h,(ix-10)
0x92F8 ++   7E          	ld	a, (hl)
0x92F9 ++   23          	inc	hl
0x92FA ++   66          	ld	h, (hl)
0x92FB ++   6F          	ld	l, a
0x92FC ++   C5          	push	bc
0x92FD ++   D5          	push	de
0x92FE ++   E5          	push	hl
0x92FF ++   DD 6E FB    	ld	l,(ix-5)
0x9302 ++   DD 66 FC    	ld	h,(ix-4)
0x9305 ++   E3          	ex	(sp), hl
0x9306 ++   E5          	push	hl
0x9307 ++   CD 00 00    	call	_addf16_callee
0x930A ++   DD 75 FB    	ld	(ix-5),l
0x930D ++   DD 74 FC    	ld	(ix-4),h
0x9310 ++   D1          	pop	de
0x9311 ++   C1          	pop	bc
0x9312 ++   DD 6E F5    	ld	l,(ix-11)
0x9315 ++   DD 66 F6    	ld	h,(ix-10)
0x9318 ++   DD 7E FB    	ld	a,(ix-5)
0x931B ++   77          	ld	(hl), a
0x931C ++   23          	inc	hl
0x931D ++   DD 7E FC    	ld	a,(ix-4)
0x9320 ++   77          	ld	(hl), a
0x9321 ++               l_main_00120:
0x9321 ++               ;main.c:132: move_to_player_x_i = player_x_i - swarm[i].x_i;
0x9321 ++   DD 6E F3    	ld	l,(ix-13)
0x9324 ++   DD 66 F4    	ld	h,(ix-12)
0x9327 ++   7E          	ld	a, (hl)
0x9328 ++   DD 77 FB    	ld	(ix-5),a
0x932B ++   23          	inc	hl
0x932C ++   7E          	ld	a, (hl)
0x932D ++   DD 77 FC    	ld	(ix-4),a
0x9330 ++   3A 04 01    	ld	a,(_player_x_i)
0x9333 ++   DD 96 FB    	sub	a,(ix-5)
0x9336 ++   32 0C 01    	ld	(_move_to_player_x_i),a
0x9339 ++   3A 05 01    	ld	a,(_player_x_i + 1)
0x933C ++   DD 9E FC    	sbc	a,(ix-4)
0x933F ++   32 0D 01    	ld	(_move_to_player_x_i + 1),a
0x9342 ++               ;main.c:133: move_to_player_y_i = player_y_i - swarm[i].y_i;
0x9342 ++   DD 7E F3    	ld	a,(ix-13)
0x9345 ++   C6 02       	add	a,0x02
0x9347 ++   DD 77 F7    	ld	(ix-9),a
0x934A ++   DD 7E F4    	ld	a,(ix-12)
0x934D ++   CE 00       	adc	a,0x00
0x934F ++   DD 77 F8    	ld	(ix-8),a
0x9352 ++   DD 6E F7    	ld	l,(ix-9)
0x9355 ++   DD 66 F8    	ld	h,(ix-8)
0x9358 ++   7E          	ld	a, (hl)
0x9359 ++   DD 77 FB    	ld	(ix-5),a
0x935C ++   23          	inc	hl
0x935D ++   7E          	ld	a, (hl)
0x935E ++   DD 77 FC    	ld	(ix-4),a
0x9361 ++   3A 06 01    	ld	a,(_player_y_i)
0x9364 ++   DD 96 FB    	sub	a,(ix-5)
0x9367 ++   32 0E 01    	ld	(_move_to_player_y_i),a
0x936A ++   3A 07 01    	ld	a,(_player_y_i + 1)
0x936D ++   DD 9E FC    	sbc	a,(ix-4)
0x9370 ++   32 0F 01    	ld	(_move_to_player_y_i + 1),a
0x9373 ++               ;main.c:135: swarm[i].velocity_x = addf16( swarm[i].velocity_x, divf16( f16_i16(move_to_player_x_i), f100 ) );
0x9373 ++   C5          	push	bc
0x9374 ++   D5          	push	de
0x9375 ++   2A 0C 01    	ld	hl, (_move_to_player_x_i)
0x9378 ++   CD 00 00    	call	_f16_i16_fastcall
0x937B ++   E5          	push	hl
0x937C ++   DD 6E F1    	ld	l,(ix-15)
0x937F ++   DD 66 F2    	ld	h,(ix-14)
0x9382 ++   E3          	ex	(sp), hl
0x9383 ++   E5          	push	hl
0x9384 ++   CD 00 00    	call	_divf16_callee
0x9387 ++   DD 75 FB    	ld	(ix-5),l
0x938A ++   DD 74 FC    	ld	(ix-4),h
0x938D ++   D1          	pop	de
0x938E ++   C1          	pop	bc
0x938F ++   69          	ld	l, c
0x9390 ++   60          	ld	h, b
0x9391 ++   7E          	ld	a, (hl)
0x9392 ++   23          	inc	hl
0x9393 ++   66          	ld	h, (hl)
0x9394 ++   6F          	ld	l, a
0x9395 ++   C5          	push	bc
0x9396 ++   D5          	push	de
0x9397 ++   E5          	push	hl
0x9398 ++   DD 6E FB    	ld	l,(ix-5)
0x939B ++   DD 66 FC    	ld	h,(ix-4)
0x939E ++   E3          	ex	(sp), hl
0x939F ++   E5          	push	hl
0x93A0 ++   CD 00 00    	call	_addf16_callee
0x93A3 ++   DD 75 FB    	ld	(ix-5),l
0x93A6 ++   DD 74 FC    	ld	(ix-4),h
0x93A9 ++   D1          	pop	de
0x93AA ++   C1          	pop	bc
0x93AB ++   69          	ld	l, c
0x93AC ++   60          	ld	h, b
0x93AD ++   DD 7E FB    	ld	a,(ix-5)
0x93B0 ++   77          	ld	(hl), a
0x93B1 ++   23          	inc	hl
0x93B2 ++   DD 7E FC    	ld	a,(ix-4)
0x93B5 ++   77          	ld	(hl), a
0x93B6 ++               ;main.c:136: swarm[i].velocity_y = addf16( swarm[i].velocity_y, divf16( f16_i16(move_to_player_y_i), f100 ) );
0x93B6 ++   C5          	push	bc
0x93B7 ++   D5          	push	de
0x93B8 ++   2A 0E 01    	ld	hl, (_move_to_player_y_i)
0x93BB ++   CD 00 00    	call	_f16_i16_fastcall
0x93BE ++   E5          	push	hl
0x93BF ++   DD 6E F1    	ld	l,(ix-15)
0x93C2 ++   DD 66 F2    	ld	h,(ix-14)
0x93C5 ++   E3          	ex	(sp), hl
0x93C6 ++   E5          	push	hl
0x93C7 ++   CD 00 00    	call	_divf16_callee
0x93CA ++   DD 75 FB    	ld	(ix-5),l
0x93CD ++   DD 74 FC    	ld	(ix-4),h
0x93D0 ++   D1          	pop	de
0x93D1 ++   C1          	pop	bc
0x93D2 ++   DD 6E F5    	ld	l,(ix-11)
0x93D5 ++   DD 66 F6    	ld	h,(ix-10)
0x93D8 ++   7E          	ld	a, (hl)
0x93D9 ++   23          	inc	hl
0x93DA ++   66          	ld	h, (hl)
0x93DB ++   6F          	ld	l, a
0x93DC ++   C5          	push	bc
0x93DD ++   D5          	push	de
0x93DE ++   E5          	push	hl
0x93DF ++   DD 6E FB    	ld	l,(ix-5)
0x93E2 ++   DD 66 FC    	ld	h,(ix-4)
0x93E5 ++   E3          	ex	(sp), hl
0x93E6 ++   E5          	push	hl
0x93E7 ++   CD 00 00    	call	_addf16_callee
0x93EA ++   DD 75 FB    	ld	(ix-5),l
0x93ED ++   DD 74 FC    	ld	(ix-4),h
0x93F0 ++   D1          	pop	de
0x93F1 ++   C1          	pop	bc
0x93F2 ++   DD 6E F5    	ld	l,(ix-11)
0x93F5 ++   DD 66 F6    	ld	h,(ix-10)
0x93F8 ++   DD 7E FB    	ld	a,(ix-5)
0x93FB ++   77          	ld	(hl), a
0x93FC ++   23          	inc	hl
0x93FD ++   DD 7E FC    	ld	a,(ix-4)
0x9400 ++   77          	ld	(hl), a
0x9401 ++               ;main.c:142: const half_t SPEED_LIMIT = f16_f32(2.75);
0x9401 ++   C5          	push	bc
0x9402 ++   D5          	push	de
0x9403 ++   21 00 00    	ld	hl,0x0000
0x9406 ++   11 30 40    	ld	de,0x4030
0x9409 ++   CD 00 00    	call	_f16_f32_fastcall
0x940C ++   D1          	pop	de
0x940D ++   C1          	pop	bc
0x940E ++   DD 75 FB    	ld	(ix-5),l
0x9411 ++   DD 74 FC    	ld	(ix-4),h
0x9414 ++               ;main.c:143: if( isgreaterf16( swarm[i].velocity_x, SPEED_LIMIT ) || isgreaterf16( swarm[i].velocity_y, SPEED_LIMIT ) )
0x9414 ++   69          	ld	l, c
0x9415 ++   60          	ld	h, b
0x9416 ++   7E          	ld	a, (hl)
0x9417 ++   23          	inc	hl
0x9418 ++   66          	ld	h, (hl)
0x9419 ++   6F          	ld	l, a
0x941A ++   C5          	push	bc
0x941B ++   D5          	push	de
0x941C ++   E5          	push	hl
0x941D ++   DD 6E FB    	ld	l,(ix-5)
0x9420 ++   DD 66 FC    	ld	h,(ix-4)
0x9423 ++   E3          	ex	(sp), hl
0x9424 ++   E5          	push	hl
0x9425 ++   CD 00 00    	call	_isgreaterf16_callee
0x9428 ++   D1          	pop	de
0x9429 ++   C1          	pop	bc
0x942A ++   7C          	ld	a, h
0x942B ++   B5          	or	a, l
0x942C ++   20 1E       	jr	NZ,l_main_00121
0x942E ++   DD 6E F5    	ld	l,(ix-11)
0x9431 ++   DD 66 F6    	ld	h,(ix-10)
0x9434 ++   7E          	ld	a, (hl)
0x9435 ++   23          	inc	hl
0x9436 ++   66          	ld	h, (hl)
0x9437 ++   6F          	ld	l, a
0x9438 ++   C5          	push	bc
0x9439 ++   D5          	push	de
0x943A ++   E5          	push	hl
0x943B ++   DD 6E FB    	ld	l,(ix-5)
0x943E ++   DD 66 FC    	ld	h,(ix-4)
0x9441 ++   E3          	ex	(sp), hl
0x9442 ++   E5          	push	hl
0x9443 ++   CD 00 00    	call	_isgreaterf16_callee
0x9446 ++   D1          	pop	de
0x9447 ++   C1          	pop	bc
0x9448 ++   7C          	ld	a, h
0x9449 ++   B5          	or	a, l
0x944A ++   28 44       	jr	Z,l_main_00122
0x944C ++               l_main_00121:
0x944C ++               ;main.c:145: swarm[i].velocity_x = div2f16( swarm[i].velocity_x );
0x944C ++   69          	ld	l, c
0x944D ++   60          	ld	h, b
0x944E ++   7E          	ld	a, (hl)
0x944F ++   23          	inc	hl
0x9450 ++   66          	ld	h, (hl)
0x9451 ++   6F          	ld	l, a
0x9452 ++   C5          	push	bc
0x9453 ++   D5          	push	de
0x9454 ++   CD 00 00    	call	_div2f16_fastcall
0x9457 ++   DD 75 FB    	ld	(ix-5),l
0x945A ++   DD 74 FC    	ld	(ix-4),h
0x945D ++   D1          	pop	de
0x945E ++   C1          	pop	bc
0x945F ++   69          	ld	l, c
0x9460 ++   60          	ld	h, b
0x9461 ++   DD 7E FB    	ld	a,(ix-5)
0x9464 ++   77          	ld	(hl), a
0x9465 ++   23          	inc	hl
0x9466 ++   DD 7E FC    	ld	a,(ix-4)
0x9469 ++   77          	ld	(hl), a
0x946A ++               ;main.c:146: swarm[i].velocity_y = div2f16( swarm[i].velocity_y );
0x946A ++   DD 6E F5    	ld	l,(ix-11)
0x946D ++   DD 66 F6    	ld	h,(ix-10)
0x9470 ++   7E          	ld	a, (hl)
0x9471 ++   23          	inc	hl
0x9472 ++   66          	ld	h, (hl)
0x9473 ++   6F          	ld	l, a
0x9474 ++   C5          	push	bc
0x9475 ++   D5          	push	de
0x9476 ++   CD 00 00    	call	_div2f16_fastcall
0x9479 ++   DD 75 FB    	ld	(ix-5),l
0x947C ++   DD 74 FC    	ld	(ix-4),h
0x947F ++   D1          	pop	de
0x9480 ++   C1          	pop	bc
0x9481 ++   DD 6E F5    	ld	l,(ix-11)
0x9484 ++   DD 66 F6    	ld	h,(ix-10)
0x9487 ++   DD 7E FB    	ld	a,(ix-5)
0x948A ++   77          	ld	(hl), a
0x948B ++   23          	inc	hl
0x948C ++   DD 7E FC    	ld	a,(ix-4)
0x948F ++   77          	ld	(hl), a
0x9490 ++               l_main_00122:
0x9490 ++               ;main.c:151: swarm[i].x_f = addf16( swarm[i].x_f, swarm[i].velocity_x );
0x9490 ++   DD 7E F3    	ld	a,(ix-13)
0x9493 ++   C6 04       	add	a,0x04
0x9495 ++   DD 77 F9    	ld	(ix-7),a
0x9498 ++   DD 7E F4    	ld	a,(ix-12)
0x949B ++   CE 00       	adc	a,0x00
0x949D ++   DD 77 FA    	ld	(ix-6),a
0x94A0 ++   69          	ld	l, c
0x94A1 ++   60          	ld	h, b
0x94A2 ++   4E          	ld	c, (hl)
0x94A3 ++   23          	inc	hl
0x94A4 ++   46          	ld	b, (hl)
0x94A5 ++   DD 6E F9    	ld	l,(ix-7)
0x94A8 ++   DD 66 FA    	ld	h,(ix-6)
0x94AB ++   7E          	ld	a, (hl)
0x94AC ++   23          	inc	hl
0x94AD ++   66          	ld	h, (hl)
0x94AE ++   6F          	ld	l, a
0x94AF ++   D5          	push	de
0x94B0 ++   C5          	push	bc
0x94B1 ++   E5          	push	hl
0x94B2 ++   CD 00 00    	call	_addf16_callee
0x94B5 ++   4D          	ld	c, l
0x94B6 ++   44          	ld	b, h
0x94B7 ++   D1          	pop	de
0x94B8 ++   DD 6E F9    	ld	l,(ix-7)
0x94BB ++   DD 66 FA    	ld	h,(ix-6)
0x94BE ++   71          	ld	(hl), c
0x94BF ++   23          	inc	hl
0x94C0 ++   70          	ld	(hl), b
0x94C1 ++               ;main.c:152: swarm[i].y_f = addf16( swarm[i].y_f, swarm[i].velocity_y );
0x94C1 ++   DD 7E F3    	ld	a,(ix-13)
0x94C4 ++   C6 06       	add	a,0x06
0x94C6 ++   DD 77 FB    	ld	(ix-5),a
0x94C9 ++   DD 7E F4    	ld	a,(ix-12)
0x94CC ++   CE 00       	adc	a,0x00
0x94CE ++   DD 77 FC    	ld	(ix-4),a
0x94D1 ++   DD 6E F5    	ld	l,(ix-11)
0x94D4 ++   DD 66 F6    	ld	h,(ix-10)
0x94D7 ++   4E          	ld	c, (hl)
0x94D8 ++   23          	inc	hl
0x94D9 ++   46          	ld	b, (hl)
0x94DA ++   DD 6E FB    	ld	l,(ix-5)
0x94DD ++   DD 66 FC    	ld	h,(ix-4)
0x94E0 ++   7E          	ld	a, (hl)
0x94E1 ++   23          	inc	hl
0x94E2 ++   66          	ld	h, (hl)
0x94E3 ++   6F          	ld	l, a
0x94E4 ++   D5          	push	de
0x94E5 ++   C5          	push	bc
0x94E6 ++   E5          	push	hl
0x94E7 ++   CD 00 00    	call	_addf16_callee
0x94EA ++   4D          	ld	c, l
0x94EB ++   44          	ld	b, h
0x94EC ++   D1          	pop	de
0x94ED ++   DD 6E FB    	ld	l,(ix-5)
0x94F0 ++   DD 66 FC    	ld	h,(ix-4)
0x94F3 ++   71          	ld	(hl), c
0x94F4 ++   23          	inc	hl
0x94F5 ++   70          	ld	(hl), b
0x94F6 ++               ;main.c:155: swarm[i].x_i = i16_f16( ( swarm[i].x_f ) );
0x94F6 ++   DD 6E F9    	ld	l,(ix-7)
0x94F9 ++   DD 66 FA    	ld	h,(ix-6)
0x94FC ++   7E          	ld	a, (hl)
0x94FD ++   23          	inc	hl
0x94FE ++   66          	ld	h, (hl)
0x94FF ++   6F          	ld	l, a
0x9500 ++   D5          	push	de
0x9501 ++   CD 00 00    	call	_i16_f16_fastcall
0x9504 ++   4D          	ld	c, l
0x9505 ++   44          	ld	b, h
0x9506 ++   D1          	pop	de
0x9507 ++   DD 6E F3    	ld	l,(ix-13)
0x950A ++   DD 66 F4    	ld	h,(ix-12)
0x950D ++   71          	ld	(hl), c
0x950E ++   23          	inc	hl
0x950F ++   70          	ld	(hl), b
0x9510 ++               ;main.c:156: swarm[i].y_i = i16_f16( ( swarm[i].y_f ) );
0x9510 ++   DD 6E FB    	ld	l,(ix-5)
0x9513 ++   DD 66 FC    	ld	h,(ix-4)
0x9516 ++   7E          	ld	a, (hl)
0x9517 ++   23          	inc	hl
0x9518 ++   66          	ld	h, (hl)
0x9519 ++   6F          	ld	l, a
0x951A ++   D5          	push	de
0x951B ++   CD 00 00    	call	_i16_f16_fastcall
0x951E ++   4D          	ld	c, l
0x951F ++   44          	ld	b, h
0x9520 ++   D1          	pop	de
0x9521 ++   DD 6E F7    	ld	l,(ix-9)
0x9524 ++   DD 66 F8    	ld	h,(ix-8)
0x9527 ++   71          	ld	(hl), c
0x9528 ++   23          	inc	hl
0x9529 ++   70          	ld	(hl), b
0x952A ++               l_main_00124:
0x952A ++               ;main.c:112: for( i=0; i < MAX_IN_SWARM; i++ )
0x952A ++   13          	inc	de
0x952B ++   7B          	ld	a, e
0x952C ++   D6 0A       	sub	a,0x0a
0x952E ++   7A          	ld	a, d
0x952F ++   17          	rla
0x9530 ++   3F          	ccf
0x9531 ++   1F          	rra
0x9532 ++   DE 80       	sbc	a,0x80
0x9534 ++   DA 04 02    	jp	C, l_main_00134
0x9537 ++               ;main.c:161: clear_swarm();
0x9537 ++   CD 00 00    	call	_clear_swarm
0x953A ++               ;main.c:162: clear_player( previous_player_x_i, previous_player_y_i );
0x953A ++   3A 0A 01    	ld	a,(_previous_player_y_i)
0x953D ++   21 08 01    	ld	hl,_previous_player_x_i
0x9540 ++   46          	ld	b, (hl)
0x9541 ++   F5          	push	af
0x9542 ++   33          	inc	sp
0x9543 ++   C5          	push	bc
0x9544 ++   33          	inc	sp
0x9545 ++   CD 00 00    	call	_clear_player
0x9548 ++   F1          	pop	af
0x9549 ++               ;main.c:165: draw_player( player_x_i, player_y_i );
0x9549 ++   3A 06 01    	ld	a,(_player_y_i)
0x954C ++   21 04 01    	ld	hl,_player_x_i
0x954F ++   46          	ld	b, (hl)
0x9550 ++   F5          	push	af
0x9551 ++   33          	inc	sp
0x9552 ++   C5          	push	bc
0x9553 ++   33          	inc	sp
0x9554 ++   CD 00 00    	call	_draw_player
0x9557 ++   F1          	pop	af
0x9558 ++               ;main.c:166: draw_swarm_or();
0x9558 ++   CD 00 00    	call	_draw_swarm_or
0x955B ++               ;main.c:169: memcpy( previous_swarm, swarm, sizeof(swarm) );
0x955B ++   11 82 00    	ld	de,_previous_swarm
0x955E ++   21 00 00    	ld	hl,_swarm
0x9561 ++   01 82 00    	ld	bc,0x0082
0x9564 ++   ED B0       	ldir
0x9566 ++               ;main.c:170: previous_player_x_i = player_x_i;
0x9566 ++   3A 04 01    	ld	a,(_player_x_i)
0x9569 ++   32 08 01    	ld	(_previous_player_x_i),a
0x956C ++   3A 05 01    	ld	a,(_player_x_i + 1)
0x956F ++   32 09 01    	ld	(_previous_player_x_i + 1),a
0x9572 ++               ;main.c:171: previous_player_y_i = player_y_i;
0x9572 ++   3A 06 01    	ld	a,(_player_y_i)
0x9575 ++   32 0A 01    	ld	(_previous_player_y_i),a
0x9578 ++   3A 07 01    	ld	a,(_player_y_i + 1)
0x957B ++   32 0B 01    	ld	(_previous_player_y_i + 1),a
0x957E ++   C3 75 01    	jp	l_main_00126
0x9581 ++               l_main_00135:
0x9581 ++               ;main.c:173: }
0x9581 ++   DD F9       	ld	sp, ix
0x9583 ++   DD E1       	pop	ix
0x9585 ++   C9          	ret
0x9586 ++               	SECTION data_compiler
0x9844 ++               _int_fired:
0x9844 ++   00          	DEFB +0x00
0x9845 ++               	SECTION IGNORE
0x9844 ++               
